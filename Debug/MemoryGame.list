
MemoryGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cbc  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000eac  08000eac  00001eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ec8  08000ec8  00002030  2**0
                  CONTENTS
  4 .ARM          00000000  08000ec8  08000ec8  00002030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ec8  08000ec8  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ec8  08000ec8  00001ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ecc  08000ecc  00001ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08000ed0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000030  08000f00  00002030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08000f00  000021a0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001661  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007af  00000000  00000000  000036c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00003e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000103  00000000  00000000  00003ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001637  00000000  00000000  000040fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002316  00000000  00000000  00005732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000472b  00000000  00000000  00007a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000c173  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003a8  00000000  00000000  0000c1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0000c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000030 	.word	0x20000030
 800020c:	00000000 	.word	0x00000000
 8000210:	08000e94 	.word	0x08000e94

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000034 	.word	0x20000034
 800022c:	08000e94 	.word	0x08000e94

08000230 <get_button>:
	while ((ADC_1->ISR & 1) == 0) {} //wait until ADC is ready
	ADC_1->IER |= (1 << 2); //turn on EOC interrupts
	ISER1 |= (1 << 5); //enable global signaling for ADC_1_2 interrupt
}

int get_button(uint16_t voltage) {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	80fb      	strh	r3, [r7, #6]

    if(voltage<15){
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	2b0e      	cmp	r3, #14
 800023e:	d802      	bhi.n	8000246 <get_button+0x16>
        return -1;
 8000240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000244:	e024      	b.n	8000290 <get_button+0x60>
    }
    else if(voltage<20){
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b13      	cmp	r3, #19
 800024a:	d801      	bhi.n	8000250 <get_button+0x20>
        return 0;
 800024c:	2300      	movs	r3, #0
 800024e:	e01f      	b.n	8000290 <get_button+0x60>
    }
    else if(voltage<25){
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	2b18      	cmp	r3, #24
 8000254:	d801      	bhi.n	800025a <get_button+0x2a>
        return 1;
 8000256:	2301      	movs	r3, #1
 8000258:	e01a      	b.n	8000290 <get_button+0x60>
    }
    else if(voltage<30){
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	2b1d      	cmp	r3, #29
 800025e:	d801      	bhi.n	8000264 <get_button+0x34>
        return 2;
 8000260:	2302      	movs	r3, #2
 8000262:	e015      	b.n	8000290 <get_button+0x60>
    }
    else if(voltage<35){ 
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	2b22      	cmp	r3, #34	@ 0x22
 8000268:	d801      	bhi.n	800026e <get_button+0x3e>
        return 3;
 800026a:	2303      	movs	r3, #3
 800026c:	e010      	b.n	8000290 <get_button+0x60>
    }
    else if(voltage<40){
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	2b27      	cmp	r3, #39	@ 0x27
 8000272:	d801      	bhi.n	8000278 <get_button+0x48>
        return 4;
 8000274:	2304      	movs	r3, #4
 8000276:	e00b      	b.n	8000290 <get_button+0x60>
    }
    else if(voltage<45){
 8000278:	88fb      	ldrh	r3, [r7, #6]
 800027a:	2b2c      	cmp	r3, #44	@ 0x2c
 800027c:	d801      	bhi.n	8000282 <get_button+0x52>
        return 5;
 800027e:	2305      	movs	r3, #5
 8000280:	e006      	b.n	8000290 <get_button+0x60>
    }
    else if(voltage<50){
 8000282:	88fb      	ldrh	r3, [r7, #6]
 8000284:	2b31      	cmp	r3, #49	@ 0x31
 8000286:	d801      	bhi.n	800028c <get_button+0x5c>
        return 6;
 8000288:	2306      	movs	r3, #6
 800028a:	e001      	b.n	8000290 <get_button+0x60>
    }
    else{
        return -1;
 800028c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
    
}
 8000290:	4618      	mov	r0, r3
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <reset_game>:
TURN current_turn;
MOVE memory[100];
int current_memory_index = 0; // the number of buttons pressed for the player's current turn
int turn_counter = 0; // the number of turns

void reset_game() {
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	current_turn = UNDEFINED;
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <reset_game+0x28>)
 80002a2:	2202      	movs	r2, #2
 80002a4:	701a      	strb	r2, [r3, #0]
	current_memory_index = 0;
 80002a6:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <reset_game+0x2c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
	turn_counter = 0;
 80002ac:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <reset_game+0x30>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
//	seven_segment_display(0);
	display.turn_counter = 0; //TODO:display
 80002b2:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <reset_game+0x34>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]


//    TIM6->CR1 |= 1; // Enable timer.
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2000004c 	.word	0x2000004c
 80002c8:	2000017c 	.word	0x2000017c
 80002cc:	20000180 	.word	0x20000180
 80002d0:	20000184 	.word	0x20000184

080002d4 <is_current_move_correct>:

bool is_current_move_correct(MOVE move) {
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
    if (memory[current_memory_index].button != move.button) {
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <is_current_move_correct+0x4c>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	4910      	ldr	r1, [pc, #64]	@ (8000324 <is_current_move_correct+0x50>)
 80002e2:	4613      	mov	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	4413      	add	r3, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	781a      	ldrb	r2, [r3, #0]
 80002ec:	793b      	ldrb	r3, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d001      	beq.n	80002f6 <is_current_move_correct+0x22>
        return false;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e00e      	b.n	8000314 <is_current_move_correct+0x40>
    }
    return memory[current_memory_index].time == move.time;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <is_current_move_correct+0x4c>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	490a      	ldr	r1, [pc, #40]	@ (8000324 <is_current_move_correct+0x50>)
 80002fc:	4613      	mov	r3, r2
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	4413      	add	r3, r2
 8000302:	440b      	add	r3, r1
 8000304:	3301      	adds	r3, #1
 8000306:	781a      	ldrb	r2, [r3, #0]
 8000308:	797b      	ldrb	r3, [r7, #5]
 800030a:	429a      	cmp	r2, r3
 800030c:	bf0c      	ite	eq
 800030e:	2301      	moveq	r3, #1
 8000310:	2300      	movne	r3, #0
 8000312:	b2db      	uxtb	r3, r3
}
 8000314:	4618      	mov	r0, r3
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	2000017c 	.word	0x2000017c
 8000324:	20000050 	.word	0x20000050

08000328 <switch_turn>:


void switch_turn() {
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	if (current_turn == PLAYER) {
 800032c:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <switch_turn+0x40>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d103      	bne.n	800033c <switch_turn+0x14>
		current_turn = OPPONENT; // Opponent's turn
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <switch_turn+0x40>)
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]
 800033a:	e002      	b.n	8000342 <switch_turn+0x1a>
//		turn_off_LEDs(); // Turn off turn indicator LED // TODO: display

//		TIM6->CR1 &= ~(1 << 0); // Disable timer.
	}
	else {
		current_turn = PLAYER; // Player's turn
 800033c:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <switch_turn+0x40>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
//		turn_on_LED_BLUE(); // Turn on turn indicator LED //  TODO: display
//		TIM6->CR1 |= 1; // Enable timer.
	}
	display.turn_counter = (++turn_counter);
 8000342:	4b0a      	ldr	r3, [pc, #40]	@ (800036c <switch_turn+0x44>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	3301      	adds	r3, #1
 8000348:	4a08      	ldr	r2, [pc, #32]	@ (800036c <switch_turn+0x44>)
 800034a:	6013      	str	r3, [r2, #0]
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <switch_turn+0x44>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	461a      	mov	r2, r3
 8000352:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <switch_turn+0x48>)
 8000354:	601a      	str	r2, [r3, #0]
//	seven_segment_display(++turn_counter);
	current_memory_index = 0;
 8000356:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <switch_turn+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	2000004c 	.word	0x2000004c
 800036c:	20000180 	.word	0x20000180
 8000370:	20000184 	.word	0x20000184
 8000374:	2000017c 	.word	0x2000017c

08000378 <handle_player_turn>:

void handle_player_turn(MOVE move) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    // If the first is from the player, then it is the player's turn
    if (current_turn == UNDEFINED) {
 8000380:	4b1d      	ldr	r3, [pc, #116]	@ (80003f8 <handle_player_turn+0x80>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b02      	cmp	r3, #2
 8000386:	d102      	bne.n	800038e <handle_player_turn+0x16>
        current_turn = PLAYER;
 8000388:	4b1b      	ldr	r3, [pc, #108]	@ (80003f8 <handle_player_turn+0x80>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
//		turn_on_LED_BLUE(); // Turn on turn indicator LED  // TODO: display
    }

	if (current_memory_index == turn_counter) {
 800038e:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <handle_player_turn+0x84>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <handle_player_turn+0x88>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d112      	bne.n	80003c0 <handle_player_turn+0x48>
		// Player has correctly pressed all the buttons
		// Send the new move to the opponent
		send_message(move);
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 fc42 	bl	8000c24 <send_message>
		// Add the message to the memory
		memory[turn_counter] = move;
 80003a0:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <handle_player_turn+0x88>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4917      	ldr	r1, [pc, #92]	@ (8000404 <handle_player_turn+0x8c>)
 80003a6:	4613      	mov	r3, r2
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	4413      	add	r3, r2
 80003ac:	440b      	add	r3, r1
 80003ae:	461a      	mov	r2, r3
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	8819      	ldrh	r1, [r3, #0]
 80003b4:	789b      	ldrb	r3, [r3, #2]
 80003b6:	8011      	strh	r1, [r2, #0]
 80003b8:	7093      	strb	r3, [r2, #2]
		switch_turn();
 80003ba:	f7ff ffb5 	bl	8000328 <switch_turn>
			send_message((MOVE){0, 0,true});
//			turn_on_LED_RED(); // Lose indicator LED  // TODO: display
			reset_game();
		}
	}
}
 80003be:	e016      	b.n	80003ee <handle_player_turn+0x76>
		if (is_current_move_correct(move)) {
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff87 	bl	80002d4 <is_current_move_correct>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d005      	beq.n	80003d8 <handle_player_turn+0x60>
			current_memory_index++;
 80003cc:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <handle_player_turn+0x84>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a0a      	ldr	r2, [pc, #40]	@ (80003fc <handle_player_turn+0x84>)
 80003d4:	6013      	str	r3, [r2, #0]
}
 80003d6:	e00a      	b.n	80003ee <handle_player_turn+0x76>
			send_message((MOVE){0, 0,true});
 80003d8:	2300      	movs	r3, #0
 80003da:	733b      	strb	r3, [r7, #12]
 80003dc:	2300      	movs	r3, #0
 80003de:	737b      	strb	r3, [r7, #13]
 80003e0:	2301      	movs	r3, #1
 80003e2:	73bb      	strb	r3, [r7, #14]
 80003e4:	68f8      	ldr	r0, [r7, #12]
 80003e6:	f000 fc1d 	bl	8000c24 <send_message>
			reset_game();
 80003ea:	f7ff ff57 	bl	800029c <reset_game>
}
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000004c 	.word	0x2000004c
 80003fc:	2000017c 	.word	0x2000017c
 8000400:	20000180 	.word	0x20000180
 8000404:	20000050 	.word	0x20000050

08000408 <handle_opponents_turn>:

void handle_opponents_turn(MOVE move) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
    // If the first is from the opponent, then it is the opponent's turn
    if (current_turn == UNDEFINED) {
 8000410:	4b12      	ldr	r3, [pc, #72]	@ (800045c <handle_opponents_turn+0x54>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d102      	bne.n	800041e <handle_opponents_turn+0x16>
        current_turn = OPPONENT;
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <handle_opponents_turn+0x54>)
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
//        TIM6->CR1 &= ~(1 << 0); // Disable timer.
    }

	// Opponent did not correctly press all the buttons
	if (move.fail) {
 800041e:	79bb      	ldrb	r3, [r7, #6]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d002      	beq.n	800042a <handle_opponents_turn+0x22>
		// Current player wins
//		turn_on_LED_GREEN(); // Win indicator LED // TODO:display
		reset_game();
 8000424:	f7ff ff3a 	bl	800029c <reset_game>
		return;
 8000428:	e014      	b.n	8000454 <handle_opponents_turn+0x4c>
	}
	if (current_turn == PLAYER) {
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <handle_opponents_turn+0x54>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d00f      	beq.n	8000452 <handle_opponents_turn+0x4a>
		// Ignore the message
		return;
	}
	// Opponent pressed button 0 or 1 at the end, add 0 or 1 to memory
	memory[turn_counter] = move;
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <handle_opponents_turn+0x58>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	490b      	ldr	r1, [pc, #44]	@ (8000464 <handle_opponents_turn+0x5c>)
 8000438:	4613      	mov	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	4413      	add	r3, r2
 800043e:	440b      	add	r3, r1
 8000440:	461a      	mov	r2, r3
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	8819      	ldrh	r1, [r3, #0]
 8000446:	789b      	ldrb	r3, [r3, #2]
 8000448:	8011      	strh	r1, [r2, #0]
 800044a:	7093      	strb	r3, [r2, #2]
	// now, it is the player's turn
	switch_turn();
 800044c:	f7ff ff6c 	bl	8000328 <switch_turn>
 8000450:	e000      	b.n	8000454 <handle_opponents_turn+0x4c>
		return;
 8000452:	bf00      	nop
}
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000004c 	.word	0x2000004c
 8000460:	20000180 	.word	0x20000180
 8000464:	20000050 	.word	0x20000050

08000468 <setup_gpio>:
};


Display display = {0};

void setup_gpio(){
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	RCC_AHB2ENR |= (0b110011);
 800046c:	4b3d      	ldr	r3, [pc, #244]	@ (8000564 <setup_gpio+0xfc>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a3c      	ldr	r2, [pc, #240]	@ (8000564 <setup_gpio+0xfc>)
 8000472:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
 8000476:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0b101010);
 8000478:	4b3b      	ldr	r3, [pc, #236]	@ (8000568 <setup_gpio+0x100>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a3a      	ldr	r2, [pc, #232]	@ (8000568 <setup_gpio+0x100>)
 800047e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8000482:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b101010);
 8000484:	4b38      	ldr	r3, [pc, #224]	@ (8000568 <setup_gpio+0x100>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a37      	ldr	r2, [pc, #220]	@ (8000568 <setup_gpio+0x100>)
 800048a:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 800048e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b1010 << (2 * 10));
 8000490:	4b36      	ldr	r3, [pc, #216]	@ (800056c <setup_gpio+0x104>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a35      	ldr	r2, [pc, #212]	@ (800056c <setup_gpio+0x104>)
 8000496:	f423 0320 	bic.w	r3, r3, #10485760	@ 0xa00000
 800049a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b0101 << (2 * 10));
 800049c:	4b33      	ldr	r3, [pc, #204]	@ (800056c <setup_gpio+0x104>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a32      	ldr	r2, [pc, #200]	@ (800056c <setup_gpio+0x104>)
 80004a2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80004a6:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(0b10101010101010 << (2 * 7));
 80004a8:	4b31      	ldr	r3, [pc, #196]	@ (8000570 <setup_gpio+0x108>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a30      	ldr	r2, [pc, #192]	@ (8000570 <setup_gpio+0x108>)
 80004ae:	f023 632a 	bic.w	r3, r3, #178257920	@ 0xaa00000
 80004b2:	f423 2328 	bic.w	r3, r3, #688128	@ 0xa8000
 80004b6:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (0b01010101010101 << (2 * 7));
 80004b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000570 <setup_gpio+0x108>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000570 <setup_gpio+0x108>)
 80004be:	f043 63aa 	orr.w	r3, r3, #89128960	@ 0x5500000
 80004c2:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 80004c6:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(0b10 << (2 * 15));
 80004c8:	4b29      	ldr	r3, [pc, #164]	@ (8000570 <setup_gpio+0x108>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a28      	ldr	r2, [pc, #160]	@ (8000570 <setup_gpio+0x108>)
 80004ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80004d2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (0b01 << (2 * 15));
 80004d4:	4b26      	ldr	r3, [pc, #152]	@ (8000570 <setup_gpio+0x108>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a25      	ldr	r2, [pc, #148]	@ (8000570 <setup_gpio+0x108>)
 80004da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80004de:	6013      	str	r3, [r2, #0]
	GPIOF->MODER &= ~(0b101010 << (2 * 13));
 80004e0:	4b24      	ldr	r3, [pc, #144]	@ (8000574 <setup_gpio+0x10c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a23      	ldr	r2, [pc, #140]	@ (8000574 <setup_gpio+0x10c>)
 80004e6:	f023 4328 	bic.w	r3, r3, #2818572288	@ 0xa8000000
 80004ea:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (0b010101 << (2 * 13));
 80004ec:	4b21      	ldr	r3, [pc, #132]	@ (8000574 <setup_gpio+0x10c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a20      	ldr	r2, [pc, #128]	@ (8000574 <setup_gpio+0x10c>)
 80004f2:	f043 43a8 	orr.w	r3, r3, #1409286144	@ 0x54000000
 80004f6:	6013      	str	r3, [r2, #0]
	GPIOF->ODR |= (0b111 << 13);
 80004f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <setup_gpio+0x10c>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000574 <setup_gpio+0x10c>)
 80004fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000502:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= (0b111);
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <setup_gpio+0x100>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <setup_gpio+0x100>)
 800050a:	f043 0307 	orr.w	r3, r3, #7
 800050e:	6153      	str	r3, [r2, #20]

	RCC_APB1ENR1 |= 1 << 5;
 8000510:	4b19      	ldr	r3, [pc, #100]	@ (8000578 <setup_gpio+0x110>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a18      	ldr	r2, [pc, #96]	@ (8000578 <setup_gpio+0x110>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6013      	str	r3, [r2, #0]
	TIM7->PSC = 399;
 800051c:	4b17      	ldr	r3, [pc, #92]	@ (800057c <setup_gpio+0x114>)
 800051e:	f240 128f 	movw	r2, #399	@ 0x18f
 8000522:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM7->ARR = 1;
 8000524:	4b15      	ldr	r3, [pc, #84]	@ (800057c <setup_gpio+0x114>)
 8000526:	2201      	movs	r2, #1
 8000528:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM7->CR1 &= ~(1<<1);
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <setup_gpio+0x114>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a13      	ldr	r2, [pc, #76]	@ (800057c <setup_gpio+0x114>)
 8000530:	f023 0302 	bic.w	r3, r3, #2
 8000534:	6013      	str	r3, [r2, #0]
	TIM7->DIER |= 1;
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <setup_gpio+0x114>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4a10      	ldr	r2, [pc, #64]	@ (800057c <setup_gpio+0x114>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	60d3      	str	r3, [r2, #12]
	ISER1 |= 1 << 18;
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <setup_gpio+0x118>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0e      	ldr	r2, [pc, #56]	@ (8000580 <setup_gpio+0x118>)
 8000548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800054c:	6013      	str	r3, [r2, #0]
	TIM7->CR1 |= 1;
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <setup_gpio+0x114>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <setup_gpio+0x114>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	4002104c 	.word	0x4002104c
 8000568:	42020000 	.word	0x42020000
 800056c:	42020400 	.word	0x42020400
 8000570:	42021000 	.word	0x42021000
 8000574:	42021400 	.word	0x42021400
 8000578:	40021058 	.word	0x40021058
 800057c:	40001400 	.word	0x40001400
 8000580:	e000e104 	.word	0xe000e104

08000584 <TIM7_IRQHandler>:


void TIM7_IRQHandler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	static uint8_t previous_turn_indicator = 3;
	static uint8_t previous_button_indicator = 8;
	TIM7->SR=0;
 800058a:	4b5f      	ldr	r3, [pc, #380]	@ (8000708 <TIM7_IRQHandler+0x184>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
	GPIOE->ODR |= (1 << 15);
 8000590:	4b5e      	ldr	r3, [pc, #376]	@ (800070c <TIM7_IRQHandler+0x188>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a5d      	ldr	r2, [pc, #372]	@ (800070c <TIM7_IRQHandler+0x188>)
 8000596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800059a:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= (0b11 << 10);
 800059c:	4b5c      	ldr	r3, [pc, #368]	@ (8000710 <TIM7_IRQHandler+0x18c>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a5b      	ldr	r2, [pc, #364]	@ (8000710 <TIM7_IRQHandler+0x18c>)
 80005a2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80005a6:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= (0b1111111 << 7);
 80005a8:	4b58      	ldr	r3, [pc, #352]	@ (800070c <TIM7_IRQHandler+0x188>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4a57      	ldr	r2, [pc, #348]	@ (800070c <TIM7_IRQHandler+0x188>)
 80005ae:	f443 537e 	orr.w	r3, r3, #16256	@ 0x3f80
 80005b2:	6153      	str	r3, [r2, #20]
	display.current_display++;
 80005b4:	4b57      	ldr	r3, [pc, #348]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80005b6:	7a1b      	ldrb	r3, [r3, #8]
 80005b8:	3301      	adds	r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b55      	ldr	r3, [pc, #340]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80005be:	721a      	strb	r2, [r3, #8]
	uint32_t number = 0 ;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
	if(display.current_display == 3) display.current_display = 0;
 80005c4:	4b53      	ldr	r3, [pc, #332]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80005c6:	7a1b      	ldrb	r3, [r3, #8]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d102      	bne.n	80005d2 <TIM7_IRQHandler+0x4e>
 80005cc:	4b51      	ldr	r3, [pc, #324]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	721a      	strb	r2, [r3, #8]
	if(display.current_display == 0) {
 80005d2:	4b50      	ldr	r3, [pc, #320]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80005d4:	7a1b      	ldrb	r3, [r3, #8]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d10d      	bne.n	80005f6 <TIM7_IRQHandler+0x72>
		GPIOB->ODR &= ~(1 << 11);
 80005da:	4b4d      	ldr	r3, [pc, #308]	@ (8000710 <TIM7_IRQHandler+0x18c>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a4c      	ldr	r2, [pc, #304]	@ (8000710 <TIM7_IRQHandler+0x18c>)
 80005e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005e4:	6153      	str	r3, [r2, #20]
		number = display.turn_counter / 10;
 80005e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a4b      	ldr	r2, [pc, #300]	@ (8000718 <TIM7_IRQHandler+0x194>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	e023      	b.n	800063e <TIM7_IRQHandler+0xba>
	}
	else if(display.current_display == 1) {
 80005f6:	4b47      	ldr	r3, [pc, #284]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80005f8:	7a1b      	ldrb	r3, [r3, #8]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d112      	bne.n	8000624 <TIM7_IRQHandler+0xa0>
		GPIOB->ODR &= ~(1 << 10);
 80005fe:	4b44      	ldr	r3, [pc, #272]	@ (8000710 <TIM7_IRQHandler+0x18c>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a43      	ldr	r2, [pc, #268]	@ (8000710 <TIM7_IRQHandler+0x18c>)
 8000604:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000608:	6153      	str	r3, [r2, #20]
		number = display.turn_counter % 10;
 800060a:	4b42      	ldr	r3, [pc, #264]	@ (8000714 <TIM7_IRQHandler+0x190>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b42      	ldr	r3, [pc, #264]	@ (8000718 <TIM7_IRQHandler+0x194>)
 8000610:	fba3 1302 	umull	r1, r3, r3, r2
 8000614:	08d9      	lsrs	r1, r3, #3
 8000616:	460b      	mov	r3, r1
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	440b      	add	r3, r1
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	e00c      	b.n	800063e <TIM7_IRQHandler+0xba>
	}
	else if(display.current_display == 2) {
 8000624:	4b3b      	ldr	r3, [pc, #236]	@ (8000714 <TIM7_IRQHandler+0x190>)
 8000626:	7a1b      	ldrb	r3, [r3, #8]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d108      	bne.n	800063e <TIM7_IRQHandler+0xba>
		GPIOE->ODR &= ~(1 << 15);
 800062c:	4b37      	ldr	r3, [pc, #220]	@ (800070c <TIM7_IRQHandler+0x188>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a36      	ldr	r2, [pc, #216]	@ (800070c <TIM7_IRQHandler+0x188>)
 8000632:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000636:	6153      	str	r3, [r2, #20]
		number = display.timer;
 8000638:	4b36      	ldr	r3, [pc, #216]	@ (8000714 <TIM7_IRQHandler+0x190>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	607b      	str	r3, [r7, #4]
	}
	GPIOE->ODR |= (0b1111111 << 7);
 800063e:	4b33      	ldr	r3, [pc, #204]	@ (800070c <TIM7_IRQHandler+0x188>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a32      	ldr	r2, [pc, #200]	@ (800070c <TIM7_IRQHandler+0x188>)
 8000644:	f443 537e 	orr.w	r3, r3, #16256	@ 0x3f80
 8000648:	6153      	str	r3, [r2, #20]
	GPIOE->ODR &= ~(display_values[number] << 7);
 800064a:	4b30      	ldr	r3, [pc, #192]	@ (800070c <TIM7_IRQHandler+0x188>)
 800064c:	695a      	ldr	r2, [r3, #20]
 800064e:	4933      	ldr	r1, [pc, #204]	@ (800071c <TIM7_IRQHandler+0x198>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000656:	01db      	lsls	r3, r3, #7
 8000658:	43db      	mvns	r3, r3
 800065a:	492c      	ldr	r1, [pc, #176]	@ (800070c <TIM7_IRQHandler+0x188>)
 800065c:	4013      	ands	r3, r2
 800065e:	614b      	str	r3, [r1, #20]

	if(display.turn_indicator != previous_turn_indicator){
 8000660:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <TIM7_IRQHandler+0x190>)
 8000662:	7a5a      	ldrb	r2, [r3, #9]
 8000664:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <TIM7_IRQHandler+0x19c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	d02a      	beq.n	80006c2 <TIM7_IRQHandler+0x13e>
		previous_turn_indicator = display.turn_indicator;
 800066c:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <TIM7_IRQHandler+0x190>)
 800066e:	7a5a      	ldrb	r2, [r3, #9]
 8000670:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <TIM7_IRQHandler+0x19c>)
 8000672:	701a      	strb	r2, [r3, #0]
		GPIOF->ODR |= (0b111 << 13);
 8000674:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <TIM7_IRQHandler+0x1a0>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a2a      	ldr	r2, [pc, #168]	@ (8000724 <TIM7_IRQHandler+0x1a0>)
 800067a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800067e:	6153      	str	r3, [r2, #20]
		switch(display.turn_indicator){
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <TIM7_IRQHandler+0x190>)
 8000682:	7a5b      	ldrb	r3, [r3, #9]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d014      	beq.n	80006b2 <TIM7_IRQHandler+0x12e>
 8000688:	2b02      	cmp	r3, #2
 800068a:	dc19      	bgt.n	80006c0 <TIM7_IRQHandler+0x13c>
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <TIM7_IRQHandler+0x112>
 8000690:	2b01      	cmp	r3, #1
 8000692:	d007      	beq.n	80006a4 <TIM7_IRQHandler+0x120>
				break;
			case 2:
				GPIOF->ODR &= ~(0b010 << 13);
				break;
			default:
				break;
 8000694:	e014      	b.n	80006c0 <TIM7_IRQHandler+0x13c>
				GPIOF->ODR &= ~(0b001 << 13);
 8000696:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <TIM7_IRQHandler+0x1a0>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <TIM7_IRQHandler+0x1a0>)
 800069c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80006a0:	6153      	str	r3, [r2, #20]
				break;
 80006a2:	e00e      	b.n	80006c2 <TIM7_IRQHandler+0x13e>
				GPIOF->ODR &= ~(0b100 << 13);
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <TIM7_IRQHandler+0x1a0>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000724 <TIM7_IRQHandler+0x1a0>)
 80006aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80006ae:	6153      	str	r3, [r2, #20]
				break;
 80006b0:	e007      	b.n	80006c2 <TIM7_IRQHandler+0x13e>
				GPIOF->ODR &= ~(0b010 << 13);
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <TIM7_IRQHandler+0x1a0>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <TIM7_IRQHandler+0x1a0>)
 80006b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80006bc:	6153      	str	r3, [r2, #20]
				break;
 80006be:	e000      	b.n	80006c2 <TIM7_IRQHandler+0x13e>
				break;
 80006c0:	bf00      	nop
		}
	}
	if(display.button_indicator != previous_button_indicator){
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80006c4:	7a9a      	ldrb	r2, [r3, #10]
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <TIM7_IRQHandler+0x1a4>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d016      	beq.n	80006fc <TIM7_IRQHandler+0x178>
		previous_button_indicator = display.button_indicator;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80006d0:	7a9a      	ldrb	r2, [r3, #10]
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <TIM7_IRQHandler+0x1a4>)
 80006d4:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR |= (0b111);
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <TIM7_IRQHandler+0x1a8>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a14      	ldr	r2, [pc, #80]	@ (800072c <TIM7_IRQHandler+0x1a8>)
 80006dc:	f043 0307 	orr.w	r3, r3, #7
 80006e0:	6153      	str	r3, [r2, #20]
		if(display.button_indicator <= 7 && display.button_indicator >=0)
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80006e4:	7a9b      	ldrb	r3, [r3, #10]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d808      	bhi.n	80006fc <TIM7_IRQHandler+0x178>
			GPIOA->ODR &= ~(display.button_indicator);
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <TIM7_IRQHandler+0x1a8>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <TIM7_IRQHandler+0x190>)
 80006f0:	7a92      	ldrb	r2, [r2, #10]
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <TIM7_IRQHandler+0x1a8>)
 80006f8:	400b      	ands	r3, r1
 80006fa:	6153      	str	r3, [r2, #20]
	}

}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40001400 	.word	0x40001400
 800070c:	42021000 	.word	0x42021000
 8000710:	42020400 	.word	0x42020400
 8000714:	20000184 	.word	0x20000184
 8000718:	cccccccd 	.word	0xcccccccd
 800071c:	20000000 	.word	0x20000000
 8000720:	20000028 	.word	0x20000028
 8000724:	42021400 	.word	0x42021400
 8000728:	20000029 	.word	0x20000029
 800072c:	42020000 	.word	0x42020000

08000730 <setup_IC>:


/*
 * Setup PA6 for IC using TIM16
 */
void setup_IC(){
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
	RCC_AHB2ENR |= (1<<('A'-'A')); // enable Port A clock
 8000736:	4b2f      	ldr	r3, [pc, #188]	@ (80007f4 <setup_IC+0xc4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a2e      	ldr	r2, [pc, #184]	@ (80007f4 <setup_IC+0xc4>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6013      	str	r3, [r2, #0]

	// set PA6 to alternate mode
	__BFI(GPIOA->MODER, GPIO_MODE_ALTERNATE, 6*2, 2)
 8000742:	2302      	movs	r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <setup_IC+0xc8>)
 8000748:	6813      	ldr	r3, [r2, #0]
 800074a:	68f9      	ldr	r1, [r7, #12]
 800074c:	f361 330d 	bfi	r3, r1, #12, #2
 8000750:	6013      	str	r3, [r2, #0]

	// set PA6 alternate function to TIM16_CH1
	__BFI(GPIOA->AFRL, 14, 6*4, 4)
 8000752:	230e      	movs	r3, #14
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4a28      	ldr	r2, [pc, #160]	@ (80007f8 <setup_IC+0xc8>)
 8000758:	6a13      	ldr	r3, [r2, #32]
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	f361 631b 	bfi	r3, r1, #24, #4
 8000760:	6213      	str	r3, [r2, #32]

	// connect TIM16 clock
	RCC_APB2ENR  |= 1<<17;
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <setup_IC+0xcc>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a25      	ldr	r2, [pc, #148]	@ (80007fc <setup_IC+0xcc>)
 8000768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076c:	6013      	str	r3, [r2, #0]

	TIM16->PSC = 39999; // 0.1kHz
 800076e:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <setup_IC+0xd0>)
 8000770:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM16->ARR = 49; // increment 0.5 second for faster game play
 8000776:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <setup_IC+0xd0>)
 8000778:	2231      	movs	r2, #49	@ 0x31
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c


	// Set CH1 to input capture
	__BFI(TIM16->CCMR1, 0b01, 0, 2)
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <setup_IC+0xd0>)
 8000782:	6993      	ldr	r3, [r2, #24]
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	f361 0301 	bfi	r3, r1, #0, #2
 800078a:	6193      	str	r3, [r2, #24]

	// set filter precsclaer to 4
	TIM16->CCMR1 |= 0xb10 << 2;
 800078c:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <setup_IC+0xd0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a1b      	ldr	r2, [pc, #108]	@ (8000800 <setup_IC+0xd0>)
 8000792:	f443 5331 	orr.w	r3, r3, #11328	@ 0x2c40
 8000796:	6193      	str	r3, [r2, #24]

	// set capture filter to f_DTS/32 with 8 samples
	TIM16->CCMR1 |= 0xF << 4;
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <setup_IC+0xd0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <setup_IC+0xd0>)
 800079e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80007a2:	6193      	str	r3, [r2, #24]

	// enable IC
	TIM16->CCER |=1 ;
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <setup_IC+0xd0>)
 80007a6:	6a1b      	ldr	r3, [r3, #32]
 80007a8:	4a15      	ldr	r2, [pc, #84]	@ (8000800 <setup_IC+0xd0>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6213      	str	r3, [r2, #32]

	// set trigger to both rising and falling edges
	TIM16->CCER |= ( 1<<3 | 1<<1);
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <setup_IC+0xd0>)
 80007b2:	6a1b      	ldr	r3, [r3, #32]
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <setup_IC+0xd0>)
 80007b6:	f043 030a 	orr.w	r3, r3, #10
 80007ba:	6213      	str	r3, [r2, #32]

	// enable IC and UI interrupts
	TIM16->DIER |=0b11;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <setup_IC+0xd0>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000800 <setup_IC+0xd0>)
 80007c2:	f043 0303 	orr.w	r3, r3, #3
 80007c6:	60d3      	str	r3, [r2, #12]

	// clear status register
	TIM16->SR = 0;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <setup_IC+0xd0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]


	TIM16->CR1 |=1; // enable TIM16 clock
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <setup_IC+0xd0>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000800 <setup_IC+0xd0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6013      	str	r3, [r2, #0]
	ISER2 |= 1 << 6;
 80007da:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <setup_IC+0xd4>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <setup_IC+0xd4>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007e4:	6013      	str	r3, [r2, #0]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	4002104c 	.word	0x4002104c
 80007f8:	42020000 	.word	0x42020000
 80007fc:	40021060 	.word	0x40021060
 8000800:	40014400 	.word	0x40014400
 8000804:	e000e108 	.word	0xe000e108

08000808 <setup_OC>:


/*
 * Setup PA7 for OC using TIM17
 */
void setup_OC(){
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
	RCC_AHB2ENR |= 1; // PORT A clock is enabled
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <setup_OC+0x9c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a24      	ldr	r2, [pc, #144]	@ (80008a4 <setup_OC+0x9c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6013      	str	r3, [r2, #0]


	// set GPIO mode to alternate
	__BFI(GPIOA->MODER, GPIO_MODE_ALTERNATE, 7*2, 2)
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <setup_OC+0xa0>)
 8000820:	6813      	ldr	r3, [r2, #0]
 8000822:	68f9      	ldr	r1, [r7, #12]
 8000824:	f361 338f 	bfi	r3, r1, #14, #2
 8000828:	6013      	str	r3, [r2, #0]

	// set GPIO alternate function to TIM17_CH1
	__BFI(GPIOA->AFRL, 14, 7*4, 4)
 800082a:	230e      	movs	r3, #14
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <setup_OC+0xa0>)
 8000830:	6a13      	ldr	r3, [r2, #32]
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	f361 731f 	bfi	r3, r1, #28, #4
 8000838:	6213      	str	r3, [r2, #32]


	RCC_APB2ENR |= 1 << 18; // TIM17 clock is enabled
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <setup_OC+0xa4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <setup_OC+0xa4>)
 8000840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000844:	6013      	str	r3, [r2, #0]

	TIM17->BDTR |= 1 << 15; //MOE
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <setup_OC+0xa8>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <setup_OC+0xa8>)
 800084c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000850:	6453      	str	r3, [r2, #68]	@ 0x44

	// select OC
	__BFI(TIM17->CCMR1, 0b00, 0, 2)
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4a16      	ldr	r2, [pc, #88]	@ (80008b0 <setup_OC+0xa8>)
 8000858:	6993      	ldr	r3, [r2, #24]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	f361 0301 	bfi	r3, r1, #0, #2
 8000860:	6193      	str	r3, [r2, #24]


	// set output mode PWM1
	__BFI(TIM17->CCMR1, 0b0110, 4, 4)
 8000862:	2306      	movs	r3, #6
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <setup_OC+0xa8>)
 8000868:	6993      	ldr	r3, [r2, #24]
 800086a:	6839      	ldr	r1, [r7, #0]
 800086c:	f361 1307 	bfi	r3, r1, #4, #4
 8000870:	6193      	str	r3, [r2, #24]

	// default polarity is active high

	// enable the timer
	TIM17->CCER |=1 ;
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <setup_OC+0xa8>)
 8000874:	6a1b      	ldr	r3, [r3, #32]
 8000876:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <setup_OC+0xa8>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6213      	str	r3, [r2, #32]

	TIM17->DIER |= 0b10; // enable OC interrupt
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <setup_OC+0xa8>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <setup_OC+0xa8>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	60d3      	str	r3, [r2, #12]
	ISER2 |= 1 << 7; // unmask TIM17 interrupts
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <setup_OC+0xac>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a09      	ldr	r2, [pc, #36]	@ (80008b4 <setup_OC+0xac>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000894:	6013      	str	r3, [r2, #0]


}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	4002104c 	.word	0x4002104c
 80008a8:	42020000 	.word	0x42020000
 80008ac:	40021060 	.word	0x40021060
 80008b0:	40014800 	.word	0x40014800
 80008b4:	e000e108 	.word	0xe000e108

080008b8 <TIM17_IRQHandler>:
typedef struct {
	int note_duration;
}_TunePlayerContext;

_TunePlayerContext _tune_player_context;
void TIM17_IRQHandler() {
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
	if ((TIM17->SR & (1 << 1)) != 0) { // if OC interrupt
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <TIM17_IRQHandler+0x44>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d014      	beq.n	80008f2 <TIM17_IRQHandler+0x3a>
		TIM17->SR &= ~(1 << 1); // clear the interrupt flag
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <TIM17_IRQHandler+0x44>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <TIM17_IRQHandler+0x44>)
 80008ce:	f023 0302 	bic.w	r3, r3, #2
 80008d2:	6113      	str	r3, [r2, #16]
		_tune_player_context.note_duration--; // down counting for tone duration
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <TIM17_IRQHandler+0x48>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3b01      	subs	r3, #1
 80008da:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <TIM17_IRQHandler+0x48>)
 80008dc:	6013      	str	r3, [r2, #0]
		if (_tune_player_context.note_duration < 0){ // if target duration is reached
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <TIM17_IRQHandler+0x48>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da05      	bge.n	80008f2 <TIM17_IRQHandler+0x3a>
			TIM17->CR1 &= ~1; // stop the timer clock ( play_tune starts it)
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <TIM17_IRQHandler+0x44>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <TIM17_IRQHandler+0x44>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40014800 	.word	0x40014800
 8000900:	20000190 	.word	0x20000190

08000904 <play_tune>:


/*
 * Plays a tune for given duration (in ms)
 */
void play_tune(unsigned char note, uint16_t duration_ms){
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]

	note %=7;
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <play_tune+0x88>)
 8000918:	fba3 1302 	umull	r1, r3, r3, r2
 800091c:	1ad1      	subs	r1, r2, r3
 800091e:	0849      	lsrs	r1, r1, #1
 8000920:	440b      	add	r3, r1
 8000922:	0899      	lsrs	r1, r3, #2
 8000924:	460b      	mov	r3, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	71fb      	strb	r3, [r7, #7]
	const static int tunes[] = {
			262, 294, 330, 349, 392, 440, 494
		 //  C    D    E    F    G    A    B
	};
	int freq = tunes[note];
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <play_tune+0x8c>)
 8000932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000936:	60fb      	str	r3, [r7, #12]

	int prescaler = 4000000/freq /2; // pre-calculate pre-scaler as integer, for precision
 8000938:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <play_tune+0x90>)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000940:	0fda      	lsrs	r2, r3, #31
 8000942:	4413      	add	r3, r2
 8000944:	105b      	asrs	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
	_tune_player_context.note_duration =  (freq*duration_ms)/1000; // set tune duration
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	4a11      	ldr	r2, [pc, #68]	@ (8000998 <play_tune+0x94>)
 8000952:	fb82 1203 	smull	r1, r2, r2, r3
 8000956:	1192      	asrs	r2, r2, #6
 8000958:	17db      	asrs	r3, r3, #31
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <play_tune+0x98>)
 800095e:	6013      	str	r3, [r2, #0]
	TIM17->PSC = prescaler-1; // counter clock freq is set to note frequency
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <play_tune+0x9c>)
 8000966:	629a      	str	r2, [r3, #40]	@ 0x28

	// %50 percent duty cycle
	TIM17->ARR  = 1;
 8000968:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <play_tune+0x9c>)
 800096a:	2201      	movs	r2, #1
 800096c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM17->CCR1 = 1;
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <play_tune+0x9c>)
 8000970:	2201      	movs	r2, #1
 8000972:	635a      	str	r2, [r3, #52]	@ 0x34

	// enable TIM17 clock
	TIM17->CR1 |= 1;
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <play_tune+0x9c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a09      	ldr	r2, [pc, #36]	@ (80009a0 <play_tune+0x9c>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6013      	str	r3, [r2, #0]

}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	24924925 	.word	0x24924925
 8000990:	08000eac 	.word	0x08000eac
 8000994:	003d0900 	.word	0x003d0900
 8000998:	10624dd3 	.word	0x10624dd3
 800099c:	20000190 	.word	0x20000190
 80009a0:	40014800 	.word	0x40014800

080009a4 <LPUART1_IRQHandler>:
#include "interrupt.h"

int ic_on_progress = 0;
int button_pressed = -1;

void LPUART1_IRQHandler(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
    if ((LPUART1->ISR & (1 << 5)) != 0) {
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <LPUART1_IRQHandler+0x60>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 0320 	and.w	r3, r3, #32
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d023      	beq.n	80009fe <LPUART1_IRQHandler+0x5a>
    	// Read the arrived value.


        MOVE move = read_message();
 80009b6:	f000 f953 	bl	8000c60 <read_message>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	713a      	strb	r2, [r7, #4]
 80009c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80009c4:	717a      	strb	r2, [r7, #5]
 80009c6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80009ca:	71bb      	strb	r3, [r7, #6]

		// Check if the move is valid.
		if (!move.fail && (move.button < 0 || move.button >= 7)) {
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	f083 0301 	eor.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <LPUART1_IRQHandler+0x3a>
 80009d8:	793b      	ldrb	r3, [r7, #4]
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d80c      	bhi.n	80009f8 <LPUART1_IRQHandler+0x54>
			return;
		}
		if (!move.fail && (move.time < 0 || move.time >= 5)) {
 80009de:	79bb      	ldrb	r3, [r7, #6]
 80009e0:	f083 0301 	eor.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <LPUART1_IRQHandler+0x4c>
 80009ea:	797b      	ldrb	r3, [r7, #5]
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d805      	bhi.n	80009fc <LPUART1_IRQHandler+0x58>
			return;
		}

		handle_opponents_turn(move);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fd09 	bl	8000408 <handle_opponents_turn>
 80009f6:	e002      	b.n	80009fe <LPUART1_IRQHandler+0x5a>
			return;
 80009f8:	bf00      	nop
 80009fa:	e000      	b.n	80009fe <LPUART1_IRQHandler+0x5a>
			return;
 80009fc:	bf00      	nop
    }
}
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40008000 	.word	0x40008000

08000a08 <TIM16_IRQHandler>:
	char     increment; // 0 or 1 : used for pulse width measurement
	char     is_rising_edge; // indicates edge direction
};
struct _ICContext ic = {0};

void TIM16_IRQHandler() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	// init internal context

	if ((TIM16->SR & (1 << 1)) != 0) { // if rising or falling edge
 8000a0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000b44 <TIM16_IRQHandler+0x13c>)
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d072      	beq.n	8000b00 <TIM16_IRQHandler+0xf8>
		TIM16->SR &= ~(1 << 1); // clear the interrupt
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b44 <TIM16_IRQHandler+0x13c>)
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	4a49      	ldr	r2, [pc, #292]	@ (8000b44 <TIM16_IRQHandler+0x13c>)
 8000a20:	f023 0302 	bic.w	r3, r3, #2
 8000a24:	6113      	str	r3, [r2, #16]
		ic.is_rising_edge^=1; // toggle rising/falling edge flag
 8000a26:	4b48      	ldr	r3, [pc, #288]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000a28:	795b      	ldrb	r3, [r3, #5]
 8000a2a:	f083 0301 	eor.w	r3, r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b45      	ldr	r3, [pc, #276]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000a32:	715a      	strb	r2, [r3, #5]
		if (ic.is_rising_edge){
 8000a34:	4b44      	ldr	r3, [pc, #272]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d016      	beq.n	8000a6a <TIM16_IRQHandler+0x62>
			/*
			 * USE ADC TO DETECT WHICH BUTTON IS PRESSED
			 */
			TIM16->CNT=0; // reset timer counter
 8000a3c:	4b41      	ldr	r3, [pc, #260]	@ (8000b44 <TIM16_IRQHandler+0x13c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
			ic.increment=1; // set increment so that the time context variable keeps pulse duration
 8000a42:	4b41      	ldr	r3, [pc, #260]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	711a      	strb	r2, [r3, #4]
			ic.time=0; // reset time context
 8000a48:	4b3f      	ldr	r3, [pc, #252]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
			display.timer = ic.time;
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a3e      	ldr	r2, [pc, #248]	@ (8000b4c <TIM16_IRQHandler+0x144>)
 8000a54:	6053      	str	r3, [r2, #4]
			ADC_1->CR |= (1 << 2); //Start regular conversion of ADC
 8000a56:	4b3e      	ldr	r3, [pc, #248]	@ (8000b50 <TIM16_IRQHandler+0x148>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b50 <TIM16_IRQHandler+0x148>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6093      	str	r3, [r2, #8]
			ic_on_progress = 1;
 8000a62:	4b3c      	ldr	r3, [pc, #240]	@ (8000b54 <TIM16_IRQHandler+0x14c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	e04a      	b.n	8000b00 <TIM16_IRQHandler+0xf8>
		}
		else{
			/*
			 * PUBLISH NOTE TIME WITH UART
			 */
			if (current_turn != OPPONENT) {
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b58 <TIM16_IRQHandler+0x150>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d040      	beq.n	8000af4 <TIM16_IRQHandler+0xec>
				handle_player_turn((MOVE){0, ic.time%5, false});
 8000a72:	2300      	movs	r3, #0
 8000a74:	713b      	strb	r3, [r7, #4]
 8000a76:	4b34      	ldr	r3, [pc, #208]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	4b38      	ldr	r3, [pc, #224]	@ (8000b5c <TIM16_IRQHandler+0x154>)
 8000a7c:	fba3 2301 	umull	r2, r3, r3, r1
 8000a80:	089a      	lsrs	r2, r3, #2
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	1aca      	subs	r2, r1, r3
 8000a8a:	b2d3      	uxtb	r3, r2
 8000a8c:	717b      	strb	r3, [r7, #5]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71bb      	strb	r3, [r7, #6]
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fc70 	bl	8000378 <handle_player_turn>
				if (button_pressed != -1) {
 8000a98:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <TIM16_IRQHandler+0x158>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000aa0:	d016      	beq.n	8000ad0 <TIM16_IRQHandler+0xc8>
					handle_player_turn((MOVE){0, ic.time%5, false});
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	703b      	strb	r3, [r7, #0]
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000aa8:	6819      	ldr	r1, [r3, #0]
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <TIM16_IRQHandler+0x154>)
 8000aac:	fba3 2301 	umull	r2, r3, r3, r1
 8000ab0:	089a      	lsrs	r2, r3, #2
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	1aca      	subs	r2, r1, r3
 8000aba:	b2d3      	uxtb	r3, r2
 8000abc:	707b      	strb	r3, [r7, #1]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	70bb      	strb	r3, [r7, #2]
 8000ac2:	6838      	ldr	r0, [r7, #0]
 8000ac4:	f7ff fc58 	bl	8000378 <handle_player_turn>
					button_pressed = -1;
 8000ac8:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <TIM16_IRQHandler+0x158>)
 8000aca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ace:	601a      	str	r2, [r3, #0]
				}
				play_tune(ic.time%7, 100);
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <TIM16_IRQHandler+0x15c>)
 8000ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8000ada:	1ad1      	subs	r1, r2, r3
 8000adc:	0849      	lsrs	r1, r1, #1
 8000ade:	440b      	add	r3, r1
 8000ae0:	0899      	lsrs	r1, r3, #2
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	1a5b      	subs	r3, r3, r1
 8000ae8:	1ad1      	subs	r1, r2, r3
 8000aea:	b2cb      	uxtb	r3, r1
 8000aec:	2164      	movs	r1, #100	@ 0x64
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff08 	bl	8000904 <play_tune>
			}
//			play_tune(ic.time%7, 100);
			ic_on_progress = 0;
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <TIM16_IRQHandler+0x14c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			ic.increment=0;
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	711a      	strb	r2, [r3, #4]
		}
	}

	// On timer update event increment context time
	if ((TIM16->SR & 1) != 0){
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <TIM16_IRQHandler+0x13c>)
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d013      	beq.n	8000b34 <TIM16_IRQHandler+0x12c>
		ic.time+=ic.increment; // increment time only if measuing the pulse
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000b12:	7912      	ldrb	r2, [r2, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000b18:	6013      	str	r3, [r2, #0]

		if (ic.time > 9) ic.time = 0;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b09      	cmp	r3, #9
 8000b20:	d902      	bls.n	8000b28 <TIM16_IRQHandler+0x120>
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
		TIM16->SR &= ~1;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <TIM16_IRQHandler+0x13c>)
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <TIM16_IRQHandler+0x13c>)
 8000b2e:	f023 0301 	bic.w	r3, r3, #1
 8000b32:	6113      	str	r3, [r2, #16]
	}

	// display current time
	display.timer = ic.time;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <TIM16_IRQHandler+0x140>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <TIM16_IRQHandler+0x144>)
 8000b3a:	6053      	str	r3, [r2, #4]

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40014400 	.word	0x40014400
 8000b48:	20000198 	.word	0x20000198
 8000b4c:	20000184 	.word	0x20000184
 8000b50:	42028000 	.word	0x42028000
 8000b54:	20000194 	.word	0x20000194
 8000b58:	2000004c 	.word	0x2000004c
 8000b5c:	cccccccd 	.word	0xcccccccd
 8000b60:	2000002c 	.word	0x2000002c
 8000b64:	24924925 	.word	0x24924925

08000b68 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

	if ((ADC_1->ISR & 1 << 2) != 0) { //Check EOC
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <ADC1_2_IRQHandler+0x7c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d02f      	beq.n	8000bda <ADC1_2_IRQHandler+0x72>

		uint32_t temp = ADC_1->DR;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <ADC1_2_IRQHandler+0x7c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	60fb      	str	r3, [r7, #12]
		uint8_t result = temp * 33 / 4095;
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4613      	mov	r3, r2
 8000b84:	015b      	lsls	r3, r3, #5
 8000b86:	441a      	add	r2, r3
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <ADC1_2_IRQHandler+0x80>)
 8000b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b8e:	1ad2      	subs	r2, r2, r3
 8000b90:	0852      	lsrs	r2, r2, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	0adb      	lsrs	r3, r3, #11
 8000b96:	72fb      	strb	r3, [r7, #11]
		uint16_t voltage = result;
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	813b      	strh	r3, [r7, #8]
		button_pressed = get_button(voltage);
 8000b9c:	893b      	ldrh	r3, [r7, #8]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb46 	bl	8000230 <get_button>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a11      	ldr	r2, [pc, #68]	@ (8000bec <ADC1_2_IRQHandler+0x84>)
 8000ba8:	6013      	str	r3, [r2, #0]

		if (ic_on_progress == 0) {
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <ADC1_2_IRQHandler+0x88>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d113      	bne.n	8000bda <ADC1_2_IRQHandler+0x72>
			handle_player_turn((MOVE){0, ic.time%5, false});
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	713b      	strb	r3, [r7, #4]
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <ADC1_2_IRQHandler+0x8c>)
 8000bb8:	6819      	ldr	r1, [r3, #0]
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <ADC1_2_IRQHandler+0x90>)
 8000bbc:	fba3 2301 	umull	r2, r3, r3, r1
 8000bc0:	089a      	lsrs	r2, r3, #2
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	1aca      	subs	r2, r1, r3
 8000bca:	b2d3      	uxtb	r3, r2
 8000bcc:	717b      	strb	r3, [r7, #5]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	71bb      	strb	r3, [r7, #6]
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fbd0 	bl	8000378 <handle_player_turn>
		}

	}

	return;
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop

}
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	42028000 	.word	0x42028000
 8000be8:	00100101 	.word	0x00100101
 8000bec:	2000002c 	.word	0x2000002c
 8000bf0:	20000194 	.word	0x20000194
 8000bf4:	20000198 	.word	0x20000198
 8000bf8:	cccccccd 	.word	0xcccccccd

08000bfc <setup>:
#include "interrupt.h"
#include "adc.h"



void setup() {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	//__enable_irq();

	setup_gpio();
 8000c00:	f7ff fc32 	bl	8000468 <setup_gpio>
	setup_IC();
 8000c04:	f7ff fd94 	bl	8000730 <setup_IC>
	setup_OC();
 8000c08:	f7ff fdfe 	bl	8000808 <setup_OC>
//	setup_adc();
	LPUART1_initialization();
 8000c0c:	f000 f86a 	bl	8000ce4 <LPUART1_initialization>

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <main>:

int main(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

	setup();
 8000c18:	f7ff fff0 	bl	8000bfc <setup>


	reset_game();
 8000c1c:	f7ff fb3e 	bl	800029c <reset_game>

	while(1){
		__WFI;
 8000c20:	bf30      	wfi
 8000c22:	e7fd      	b.n	8000c20 <main+0xc>

08000c24 <send_message>:
#include "uart.h"

void send_message(MOVE move) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    if (move.fail) {
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <send_message+0x16>
        LPUART1->TDR = 'A' - 1;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <send_message+0x38>)
 8000c34:	2240      	movs	r2, #64	@ 0x40
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    else {
        LPUART1->TDR = 'A' + move.button * 5 + move.time;
    }
}
 8000c38:	e009      	b.n	8000c4e <send_message+0x2a>
        LPUART1->TDR = 'A' + move.button * 5 + move.time;
 8000c3a:	793b      	ldrb	r3, [r7, #4]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	3341      	adds	r3, #65	@ 0x41
 8000c46:	797a      	ldrb	r2, [r7, #5]
 8000c48:	441a      	add	r2, r3
 8000c4a:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <send_message+0x38>)
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40008000 	.word	0x40008000

08000c60 <read_message>:

MOVE read_message() {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
    uint8_t value = LPUART1->RDR;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <read_message+0x7c>)
 8000c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c6a:	71fb      	strb	r3, [r7, #7]
    MOVE move;
    if (value == 'A' - 1) {
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b40      	cmp	r3, #64	@ 0x40
 8000c70:	d102      	bne.n	8000c78 <read_message+0x18>
        move.fail = true;
 8000c72:	2301      	movs	r3, #1
 8000c74:	70bb      	strb	r3, [r7, #2]
 8000c76:	e018      	b.n	8000caa <read_message+0x4a>
    }
    else {
        move.button = (value - 'A') / 5;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3b41      	subs	r3, #65	@ 0x41
 8000c7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <read_message+0x80>)
 8000c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c82:	1052      	asrs	r2, r2, #1
 8000c84:	17db      	asrs	r3, r3, #31
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	703b      	strb	r3, [r7, #0]
        move.time = (value - 'A') % 5;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <read_message+0x80>)
 8000c94:	fb83 1302 	smull	r1, r3, r3, r2
 8000c98:	1059      	asrs	r1, r3, #1
 8000c9a:	17d3      	asrs	r3, r2, #31
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	1ad1      	subs	r1, r2, r3
 8000ca6:	b2cb      	uxtb	r3, r1
 8000ca8:	707b      	strb	r3, [r7, #1]
    }
    return move;
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	463a      	mov	r2, r7
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	8019      	strh	r1, [r3, #0]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	0c12      	lsrs	r2, r2, #16
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	793a      	ldrb	r2, [r7, #4]
 8000cbe:	f362 0307 	bfi	r3, r2, #0, #8
 8000cc2:	797a      	ldrb	r2, [r7, #5]
 8000cc4:	f362 230f 	bfi	r3, r2, #8, #8
 8000cc8:	79ba      	ldrb	r2, [r7, #6]
 8000cca:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40008000 	.word	0x40008000
 8000ce0:	66666667 	.word	0x66666667

08000ce4 <LPUART1_initialization>:


void LPUART1_initialization(void) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
    //Enable Clock for Power Interface.
    RCC_APB1ENR1 |= 1 << 28;
 8000ce8:	4b39      	ldr	r3, [pc, #228]	@ (8000dd0 <LPUART1_initialization+0xec>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a38      	ldr	r2, [pc, #224]	@ (8000dd0 <LPUART1_initialization+0xec>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	6013      	str	r3, [r2, #0]
    // Change the regulator mode to Low-power mode.
    PWR_CR1|= 1<<14;
 8000cf4:	4b37      	ldr	r3, [pc, #220]	@ (8000dd4 <LPUART1_initialization+0xf0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a36      	ldr	r2, [pc, #216]	@ (8000dd4 <LPUART1_initialization+0xf0>)
 8000cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cfe:	6013      	str	r3, [r2, #0]
    // Turn VDDIO2 for PG[15:2] pins.
    PWR_CR2|= 1<<9;
 8000d00:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <LPUART1_initialization+0xf4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a34      	ldr	r2, [pc, #208]	@ (8000dd8 <LPUART1_initialization+0xf4>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
    // Select SYSCLK (=4MHz) for the clock source of Low-power UART.
    RCC_CCIPR1 &= ~(1 << 11); RCC_CCIPR1 |= 1 << 10;
 8000d0c:	4b33      	ldr	r3, [pc, #204]	@ (8000ddc <LPUART1_initialization+0xf8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a32      	ldr	r2, [pc, #200]	@ (8000ddc <LPUART1_initialization+0xf8>)
 8000d12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <LPUART1_initialization+0xf8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ddc <LPUART1_initialization+0xf8>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d22:	6013      	str	r3, [r2, #0]
    // Enable GPIO G port for Tx and Rx pins.
    RCC_AHB2ENR|= 1<<6;
 8000d24:	4b2e      	ldr	r3, [pc, #184]	@ (8000de0 <LPUART1_initialization+0xfc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a2d      	ldr	r2, [pc, #180]	@ (8000de0 <LPUART1_initialization+0xfc>)
 8000d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2e:	6013      	str	r3, [r2, #0]
    // Set alternate function for PG7 and PG8.
    GPIOG->MODER &=~(0b0101 << (7 * 2));
 8000d30:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a2b      	ldr	r2, [pc, #172]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d36:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8000d3a:	6013      	str	r3, [r2, #0]
    GPIOG->MODER |= 0b1010 << (7 * 2);
 8000d3c:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d42:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 8000d46:	6013      	str	r3, [r2, #0]
    // Connect PG7 to LPUART Tx.
    GPIOG->AFRL &= ~(0b0111 << (7 * 4));
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d4e:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8000d52:	6213      	str	r3, [r2, #32]
    GPIOG->AFRL |= 0b1000 << (7 * 4);
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	4a22      	ldr	r2, [pc, #136]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d5e:	6213      	str	r3, [r2, #32]
    // Connect PG8 to LPUART Tx.
    GPIOG->AFRH &=~0b0111;
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d64:	4a1f      	ldr	r2, [pc, #124]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d66:	f023 0307 	bic.w	r3, r3, #7
 8000d6a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOG->AFRH |= 0b1000;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d70:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <LPUART1_initialization+0x100>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6253      	str	r3, [r2, #36]	@ 0x24
    // Enable Clock for LPUART.
    RCC_APB1ENR2 |= 1;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <LPUART1_initialization+0x104>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000de8 <LPUART1_initialization+0x104>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6013      	str	r3, [r2, #0]
    // Set LPUART baud rate (BRR) for 115200 baud rate. 256 * 4000000 / 115200 for 115200 baud rate.
    LPUART1->BRR = 106666;
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <LPUART1_initialization+0x108>)
 8000d86:	4a1a      	ldr	r2, [pc, #104]	@ (8000df0 <LPUART1_initialization+0x10c>)
 8000d88:	60da      	str	r2, [r3, #12]
    // Enable FIFO.
    LPUART1->CR1 |= 1 << 29;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <LPUART1_initialization+0x108>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <LPUART1_initialization+0x108>)
 8000d90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d94:	6013      	str	r3, [r2, #0]
    // Enable Transmitter and Receiver.
    LPUART1->CR1 |= 0b11 << 2;
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <LPUART1_initialization+0x108>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <LPUART1_initialization+0x108>)
 8000d9c:	f043 030c 	orr.w	r3, r3, #12
 8000da0:	6013      	str	r3, [r2, #0]
    // Enable interrupt for FIFO is not empty.
    LPUART1->CR1 |= 1 << 5;
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <LPUART1_initialization+0x108>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a11      	ldr	r2, [pc, #68]	@ (8000dec <LPUART1_initialization+0x108>)
 8000da8:	f043 0320 	orr.w	r3, r3, #32
 8000dac:	6013      	str	r3, [r2, #0]
    // Enable global signalling from ISER.
    ISER2 |= 1 << 2;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <LPUART1_initialization+0x110>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a10      	ldr	r2, [pc, #64]	@ (8000df4 <LPUART1_initialization+0x110>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6013      	str	r3, [r2, #0]
    // Enable LPUART.
    LPUART1->CR1 |= 1;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <LPUART1_initialization+0x108>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <LPUART1_initialization+0x108>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40021058 	.word	0x40021058
 8000dd4:	40007000 	.word	0x40007000
 8000dd8:	40007004 	.word	0x40007004
 8000ddc:	40021088 	.word	0x40021088
 8000de0:	4002104c 	.word	0x4002104c
 8000de4:	42021800 	.word	0x42021800
 8000de8:	4002105c 	.word	0x4002105c
 8000dec:	40008000 	.word	0x40008000
 8000df0:	0001a0aa 	.word	0x0001a0aa
 8000df4:	e000e108 	.word	0xe000e108

08000df8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df8:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dfc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	@ (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e26:	f000 f811 	bl	8000e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2a:	f7ff fef3 	bl	8000c14 <main>

08000e2e <LoopForever>:

LoopForever:
  b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   r0, =_estack
 8000e30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000e3c:	08000ed0 	.word	0x08000ed0
  ldr r2, =_sbss
 8000e40:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000e44:	200001a0 	.word	0x200001a0

08000e48 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <BusFault_Handler>
	...

08000e4c <__libc_init_array>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8000e84 <__libc_init_array+0x38>)
 8000e50:	2600      	movs	r6, #0
 8000e52:	4c0d      	ldr	r4, [pc, #52]	@ (8000e88 <__libc_init_array+0x3c>)
 8000e54:	1b64      	subs	r4, r4, r5
 8000e56:	10a4      	asrs	r4, r4, #2
 8000e58:	42a6      	cmp	r6, r4
 8000e5a:	d109      	bne.n	8000e70 <__libc_init_array+0x24>
 8000e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8000e8c <__libc_init_array+0x40>)
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4c0b      	ldr	r4, [pc, #44]	@ (8000e90 <__libc_init_array+0x44>)
 8000e62:	f000 f817 	bl	8000e94 <_init>
 8000e66:	1b64      	subs	r4, r4, r5
 8000e68:	10a4      	asrs	r4, r4, #2
 8000e6a:	42a6      	cmp	r6, r4
 8000e6c:	d105      	bne.n	8000e7a <__libc_init_array+0x2e>
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e74:	3601      	adds	r6, #1
 8000e76:	4798      	blx	r3
 8000e78:	e7ee      	b.n	8000e58 <__libc_init_array+0xc>
 8000e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7e:	3601      	adds	r6, #1
 8000e80:	4798      	blx	r3
 8000e82:	e7f2      	b.n	8000e6a <__libc_init_array+0x1e>
 8000e84:	08000ec8 	.word	0x08000ec8
 8000e88:	08000ec8 	.word	0x08000ec8
 8000e8c:	08000ec8 	.word	0x08000ec8
 8000e90:	08000ecc 	.word	0x08000ecc

08000e94 <_init>:
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	bf00      	nop
 8000e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9a:	bc08      	pop	{r3}
 8000e9c:	469e      	mov	lr, r3
 8000e9e:	4770      	bx	lr

08000ea0 <_fini>:
 8000ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea2:	bf00      	nop
 8000ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea6:	bc08      	pop	{r3}
 8000ea8:	469e      	mov	lr, r3
 8000eaa:	4770      	bx	lr
