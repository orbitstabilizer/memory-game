
ICOC-PI-SUBMITTION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d84  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000f74  08000f74  00001f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fb8  08000fb8  000020a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fb8  08000fb8  000020a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fb8  08000fb8  000020a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fb8  08000fb8  00001fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000fbc  08000fbc  00001fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08000fc0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000a0  08001060  000020a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08001060  00002204  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001800  00000000  00000000  000020d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008a6  00000000  00000000  000038d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00004180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013f  00000000  00000000  00004350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000160c  00000000  00000000  0000448f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002615  00000000  00000000  00005a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000047a6  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000c856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000500  00000000  00000000  0000c89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0000cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a0 	.word	0x200000a0
 800020c:	00000000 	.word	0x00000000
 8000210:	08000f5c 	.word	0x08000f5c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a4 	.word	0x200000a4
 800022c:	08000f5c 	.word	0x08000f5c

08000230 <setup_adc>:
#include "adc.h"

void setup_adc() {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
    RCC_AHB2ENR |= (1<<1);
 8000234:	4b38      	ldr	r3, [pc, #224]	@ (8000318 <setup_adc+0xe8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a37      	ldr	r2, [pc, #220]	@ (8000318 <setup_adc+0xe8>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6013      	str	r3, [r2, #0]
	RCC_AHB2ENR |= (1<<2);
 8000240:	4b35      	ldr	r3, [pc, #212]	@ (8000318 <setup_adc+0xe8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a34      	ldr	r2, [pc, #208]	@ (8000318 <setup_adc+0xe8>)
 8000246:	f043 0304 	orr.w	r3, r3, #4
 800024a:	6013      	str	r3, [r2, #0]
	RCC_AHB2ENR |= (1<<13);
 800024c:	4b32      	ldr	r3, [pc, #200]	@ (8000318 <setup_adc+0xe8>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a31      	ldr	r2, [pc, #196]	@ (8000318 <setup_adc+0xe8>)
 8000252:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000256:	6013      	str	r3, [r2, #0]
	RCC_CCIPR1 |= (3<<28);
 8000258:	4b30      	ldr	r3, [pc, #192]	@ (800031c <setup_adc+0xec>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a2f      	ldr	r2, [pc, #188]	@ (800031c <setup_adc+0xec>)
 800025e:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000262:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(0b11 << (3*2));
 8000264:	4b2e      	ldr	r3, [pc, #184]	@ (8000320 <setup_adc+0xf0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a2d      	ldr	r2, [pc, #180]	@ (8000320 <setup_adc+0xf0>)
 800026a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800026e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (3 << (3*2));
 8000270:	4b2b      	ldr	r3, [pc, #172]	@ (8000320 <setup_adc+0xf0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a2a      	ldr	r2, [pc, #168]	@ (8000320 <setup_adc+0xf0>)
 8000276:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800027a:	6013      	str	r3, [r2, #0]

	ADC_1->CR &= ~(1 << 29); //take ADC module from deep-power down
 800027c:	4b29      	ldr	r3, [pc, #164]	@ (8000324 <setup_adc+0xf4>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a28      	ldr	r2, [pc, #160]	@ (8000324 <setup_adc+0xf4>)
 8000282:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000286:	6093      	str	r3, [r2, #8]
	ADC_1->CR |= (1 << 28); //turn on ADC voltage regulator
 8000288:	4b26      	ldr	r3, [pc, #152]	@ (8000324 <setup_adc+0xf4>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	4a25      	ldr	r2, [pc, #148]	@ (8000324 <setup_adc+0xf4>)
 800028e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000292:	6093      	str	r3, [r2, #8]


	// ADC->CCR |= (1 << 22);   // Set V_REF as external reference (typically 5V)


	ADC->CCR |= (3 << 16); //ADC_CLK = 1MHz (HCLK/4)
 8000294:	4b24      	ldr	r3, [pc, #144]	@ (8000328 <setup_adc+0xf8>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	4a23      	ldr	r2, [pc, #140]	@ (8000328 <setup_adc+0xf8>)
 800029a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800029e:	6093      	str	r3, [r2, #8]
	ADC_1->SMPR1 |= (0b111 << 12); //sampling time= 640.5 ADC_12_IN4 clock cycles
 80002a0:	4b20      	ldr	r3, [pc, #128]	@ (8000324 <setup_adc+0xf4>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000324 <setup_adc+0xf4>)
 80002a6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80002aa:	6153      	str	r3, [r2, #20]
	ADC_1->SQR1 &= ~(0b1111 << 0); // Set number of conversions to 1
 80002ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000324 <setup_adc+0xf4>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000324 <setup_adc+0xf4>)
 80002b2:	f023 030f 	bic.w	r3, r3, #15
 80002b6:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC_1->SQR1 |= 4 << 6; // 1st conversion is ADC_12_IN4
 80002b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000324 <setup_adc+0xf4>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	4a19      	ldr	r2, [pc, #100]	@ (8000324 <setup_adc+0xf4>)
 80002be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002c2:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC_1->CR |= (1 << 31); //calibrate ADC
 80002c4:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <setup_adc+0xf4>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a16      	ldr	r2, [pc, #88]	@ (8000324 <setup_adc+0xf4>)
 80002ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80002ce:	6093      	str	r3, [r2, #8]
	while ((ADC_1->CR & (1 << 31)) != 0) {} //wait until calibration is complete
 80002d0:	bf00      	nop
 80002d2:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <setup_adc+0xf4>)
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	dbfb      	blt.n	80002d2 <setup_adc+0xa2>
	ADC_1->CR |= 1; //turn on ADC module
 80002da:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <setup_adc+0xf4>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <setup_adc+0xf4>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6093      	str	r3, [r2, #8]
	while ((ADC_1->ISR & 1) == 0) {} //wait until ADC is ready
 80002e6:	bf00      	nop
 80002e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <setup_adc+0xf4>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f003 0301 	and.w	r3, r3, #1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <setup_adc+0xb8>
	ADC_1->IER |= (1 << 2); //turn on EOC interrupts
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <setup_adc+0xf4>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <setup_adc+0xf4>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6053      	str	r3, [r2, #4]
	ISER1 |= (1 << 5); //enable global signaling for ADC_1_2 interrupt
 8000300:	4b0a      	ldr	r3, [pc, #40]	@ (800032c <setup_adc+0xfc>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a09      	ldr	r2, [pc, #36]	@ (800032c <setup_adc+0xfc>)
 8000306:	f043 0320 	orr.w	r3, r3, #32
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	4002104c 	.word	0x4002104c
 800031c:	40021088 	.word	0x40021088
 8000320:	42020800 	.word	0x42020800
 8000324:	42028000 	.word	0x42028000
 8000328:	42028300 	.word	0x42028300
 800032c:	e000e104 	.word	0xe000e104

08000330 <get_button>:

int get_button(uint16_t voltage) {
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	80fb      	strh	r3, [r7, #6]

    if(voltage<15){
 800033a:	88fb      	ldrh	r3, [r7, #6]
 800033c:	2b0e      	cmp	r3, #14
 800033e:	d802      	bhi.n	8000346 <get_button+0x16>
        return -1;
 8000340:	f04f 33ff 	mov.w	r3, #4294967295
 8000344:	e024      	b.n	8000390 <get_button+0x60>
    }
    else if(voltage<20){
 8000346:	88fb      	ldrh	r3, [r7, #6]
 8000348:	2b13      	cmp	r3, #19
 800034a:	d801      	bhi.n	8000350 <get_button+0x20>
        return 0;
 800034c:	2300      	movs	r3, #0
 800034e:	e01f      	b.n	8000390 <get_button+0x60>
    }
    else if(voltage<25){
 8000350:	88fb      	ldrh	r3, [r7, #6]
 8000352:	2b18      	cmp	r3, #24
 8000354:	d801      	bhi.n	800035a <get_button+0x2a>
        return 1;
 8000356:	2301      	movs	r3, #1
 8000358:	e01a      	b.n	8000390 <get_button+0x60>
    }
    else if(voltage<30){
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b1d      	cmp	r3, #29
 800035e:	d801      	bhi.n	8000364 <get_button+0x34>
        return 2;
 8000360:	2302      	movs	r3, #2
 8000362:	e015      	b.n	8000390 <get_button+0x60>
    }
    else if(voltage<35){ 
 8000364:	88fb      	ldrh	r3, [r7, #6]
 8000366:	2b22      	cmp	r3, #34	@ 0x22
 8000368:	d801      	bhi.n	800036e <get_button+0x3e>
        return 3;
 800036a:	2303      	movs	r3, #3
 800036c:	e010      	b.n	8000390 <get_button+0x60>
    }
    else if(voltage<40){
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	2b27      	cmp	r3, #39	@ 0x27
 8000372:	d801      	bhi.n	8000378 <get_button+0x48>
        return 4;
 8000374:	2304      	movs	r3, #4
 8000376:	e00b      	b.n	8000390 <get_button+0x60>
    }
    else if(voltage<45){
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	2b2c      	cmp	r3, #44	@ 0x2c
 800037c:	d801      	bhi.n	8000382 <get_button+0x52>
        return 5;
 800037e:	2305      	movs	r3, #5
 8000380:	e006      	b.n	8000390 <get_button+0x60>
    }
    else if(voltage<50){
 8000382:	88fb      	ldrh	r3, [r7, #6]
 8000384:	2b31      	cmp	r3, #49	@ 0x31
 8000386:	d801      	bhi.n	800038c <get_button+0x5c>
        return 6;
 8000388:	2306      	movs	r3, #6
 800038a:	e001      	b.n	8000390 <get_button+0x60>
    }
    else{
        return -1;
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
    }
    
}
 8000390:	4618      	mov	r0, r3
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <reset_game>:
TURN current_turn;
MOVE memory[100];
int current_memory_index = 0; // the number of buttons pressed for the player's current turn
int turn_counter = 0; // the number of turns

void reset_game() {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	current_turn = UNDEFINED;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <reset_game+0x2c>)
 80003a2:	2202      	movs	r2, #2
 80003a4:	701a      	strb	r2, [r3, #0]
	current_memory_index = 0;
 80003a6:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <reset_game+0x30>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
	turn_counter = 0;
 80003ac:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <reset_game+0x34>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
	seven_segment_display(0);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 f93a 	bl	800062c <seven_segment_display>

    TIM6->CR1 |= 1; // Enable timer.
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <reset_game+0x38>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <reset_game+0x38>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200000bc 	.word	0x200000bc
 80003cc:	200001ec 	.word	0x200001ec
 80003d0:	200001f0 	.word	0x200001f0
 80003d4:	40001000 	.word	0x40001000

080003d8 <is_current_move_correct>:

bool is_current_move_correct(MOVE move) {
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
    if (memory[current_memory_index].button != move.button) {
 80003e0:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <is_current_move_correct+0x4c>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	4910      	ldr	r1, [pc, #64]	@ (8000428 <is_current_move_correct+0x50>)
 80003e6:	4613      	mov	r3, r2
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	4413      	add	r3, r2
 80003ec:	440b      	add	r3, r1
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	793b      	ldrb	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d001      	beq.n	80003fa <is_current_move_correct+0x22>
        return false;
 80003f6:	2300      	movs	r3, #0
 80003f8:	e00e      	b.n	8000418 <is_current_move_correct+0x40>
    }
    return memory[current_memory_index].time == move.time;
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <is_current_move_correct+0x4c>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	490a      	ldr	r1, [pc, #40]	@ (8000428 <is_current_move_correct+0x50>)
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	440b      	add	r3, r1
 8000408:	3301      	adds	r3, #1
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	797b      	ldrb	r3, [r7, #5]
 800040e:	429a      	cmp	r2, r3
 8000410:	bf0c      	ite	eq
 8000412:	2301      	moveq	r3, #1
 8000414:	2300      	movne	r3, #0
 8000416:	b2db      	uxtb	r3, r3
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	200001ec 	.word	0x200001ec
 8000428:	200000c0 	.word	0x200000c0

0800042c <switch_turn>:


void switch_turn() {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	if (current_turn == PLAYER) {
 8000430:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <switch_turn+0x58>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d10b      	bne.n	8000450 <switch_turn+0x24>
		current_turn = OPPONENT; // Opponent's turn
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <switch_turn+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
		turn_off_LEDs(); // Turn off turn indicator LED
 800043e:	f000 f98b 	bl	8000758 <turn_off_LEDs>
		TIM6->CR1 &= ~(1 << 0); // Disable timer.
 8000442:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <switch_turn+0x5c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a10      	ldr	r2, [pc, #64]	@ (8000488 <switch_turn+0x5c>)
 8000448:	f023 0301 	bic.w	r3, r3, #1
 800044c:	6013      	str	r3, [r2, #0]
 800044e:	e00a      	b.n	8000466 <switch_turn+0x3a>
	}
	else {
		current_turn = PLAYER; // Player's turn
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <switch_turn+0x58>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
		turn_on_LED_BLUE(); // Turn on turn indicator LED
 8000456:	f000 f94f 	bl	80006f8 <turn_on_LED_BLUE>
		TIM6->CR1 |= 1; // Enable timer.
 800045a:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <switch_turn+0x5c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <switch_turn+0x5c>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6013      	str	r3, [r2, #0]
	}
	seven_segment_display(++turn_counter);
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <switch_turn+0x60>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	4a07      	ldr	r2, [pc, #28]	@ (800048c <switch_turn+0x60>)
 800046e:	6013      	str	r3, [r2, #0]
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <switch_turn+0x60>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f8d9 	bl	800062c <seven_segment_display>
	current_memory_index = 0;
 800047a:	4b05      	ldr	r3, [pc, #20]	@ (8000490 <switch_turn+0x64>)
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000bc 	.word	0x200000bc
 8000488:	40001000 	.word	0x40001000
 800048c:	200001f0 	.word	0x200001f0
 8000490:	200001ec 	.word	0x200001ec

08000494 <handle_player_turn>:

void handle_player_turn(MOVE move) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    // If the first is from the player, then it is the player's turn
    if (current_turn == UNDEFINED) {
 800049c:	4b1f      	ldr	r3, [pc, #124]	@ (800051c <handle_player_turn+0x88>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	d104      	bne.n	80004ae <handle_player_turn+0x1a>
        current_turn = PLAYER;
 80004a4:	4b1d      	ldr	r3, [pc, #116]	@ (800051c <handle_player_turn+0x88>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
		turn_on_LED_BLUE(); // Turn on turn indicator LED
 80004aa:	f000 f925 	bl	80006f8 <turn_on_LED_BLUE>
    }

	if (current_memory_index == turn_counter) {
 80004ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <handle_player_turn+0x8c>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000524 <handle_player_turn+0x90>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d112      	bne.n	80004e0 <handle_player_turn+0x4c>
		// Player has correctly pressed all the buttons
		// Send the new move to the opponent
		send_message(move);
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f000 fc16 	bl	8000cec <send_message>
		// Add the message to the memory
		memory[turn_counter] = move;
 80004c0:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <handle_player_turn+0x90>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4918      	ldr	r1, [pc, #96]	@ (8000528 <handle_player_turn+0x94>)
 80004c6:	4613      	mov	r3, r2
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	4413      	add	r3, r2
 80004cc:	440b      	add	r3, r1
 80004ce:	461a      	mov	r2, r3
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	8819      	ldrh	r1, [r3, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	8011      	strh	r1, [r2, #0]
 80004d8:	7093      	strb	r3, [r2, #2]
		switch_turn();
 80004da:	f7ff ffa7 	bl	800042c <switch_turn>
			send_message((MOVE){0, 0,true});
			turn_on_LED_RED(); // Lose indicator LED
			reset_game();
		}
	}
}
 80004de:	e018      	b.n	8000512 <handle_player_turn+0x7e>
		if (is_current_move_correct(move)) {
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff ff79 	bl	80003d8 <is_current_move_correct>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d005      	beq.n	80004f8 <handle_player_turn+0x64>
			current_memory_index++;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <handle_player_turn+0x8c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000520 <handle_player_turn+0x8c>)
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	e00c      	b.n	8000512 <handle_player_turn+0x7e>
			send_message((MOVE){0, 0,true});
 80004f8:	2300      	movs	r3, #0
 80004fa:	733b      	strb	r3, [r7, #12]
 80004fc:	2300      	movs	r3, #0
 80004fe:	737b      	strb	r3, [r7, #13]
 8000500:	2301      	movs	r3, #1
 8000502:	73bb      	strb	r3, [r7, #14]
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f000 fbf1 	bl	8000cec <send_message>
			turn_on_LED_RED(); // Lose indicator LED
 800050a:	f000 f8dd 	bl	80006c8 <turn_on_LED_RED>
			reset_game();
 800050e:	f7ff ff45 	bl	800039c <reset_game>
}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200000bc 	.word	0x200000bc
 8000520:	200001ec 	.word	0x200001ec
 8000524:	200001f0 	.word	0x200001f0
 8000528:	200000c0 	.word	0x200000c0

0800052c <handle_opponents_turn>:

void handle_opponents_turn(MOVE move) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    // If the first is from the opponent, then it is the opponent's turn
    if (current_turn == UNDEFINED) {
 8000534:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <handle_opponents_turn+0x64>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d108      	bne.n	800054e <handle_opponents_turn+0x22>
        current_turn = OPPONENT;
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <handle_opponents_turn+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
        TIM6->CR1 &= ~(1 << 0); // Disable timer.
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <handle_opponents_turn+0x68>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a13      	ldr	r2, [pc, #76]	@ (8000594 <handle_opponents_turn+0x68>)
 8000548:	f023 0301 	bic.w	r3, r3, #1
 800054c:	6013      	str	r3, [r2, #0]
    }

	// Opponent did not correctly press all the buttons
	if (move.fail) {
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <handle_opponents_turn+0x32>
		// Current player wins
		turn_on_LED_GREEN(); // Win indicator LED
 8000554:	f000 f8e8 	bl	8000728 <turn_on_LED_GREEN>
		reset_game();
 8000558:	f7ff ff20 	bl	800039c <reset_game>
		return;
 800055c:	e014      	b.n	8000588 <handle_opponents_turn+0x5c>
	}
	if (current_turn == PLAYER) {
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <handle_opponents_turn+0x64>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d00f      	beq.n	8000586 <handle_opponents_turn+0x5a>
		// Ignore the message
		return;
	}
	// Opponent pressed button 0 or 1 at the end, add 0 or 1 to memory
	memory[turn_counter] = move;
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <handle_opponents_turn+0x6c>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	490c      	ldr	r1, [pc, #48]	@ (800059c <handle_opponents_turn+0x70>)
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	440b      	add	r3, r1
 8000574:	461a      	mov	r2, r3
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	8819      	ldrh	r1, [r3, #0]
 800057a:	789b      	ldrb	r3, [r3, #2]
 800057c:	8011      	strh	r1, [r2, #0]
 800057e:	7093      	strb	r3, [r2, #2]
	// now, it is the player's turn
	switch_turn();
 8000580:	f7ff ff54 	bl	800042c <switch_turn>
 8000584:	e000      	b.n	8000588 <handle_opponents_turn+0x5c>
		return;
 8000586:	bf00      	nop
}
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000bc 	.word	0x200000bc
 8000594:	40001000 	.word	0x40001000
 8000598:	200001f0 	.word	0x200001f0
 800059c:	200000c0 	.word	0x200000c0

080005a0 <enable_gpio_data>:
	{GPIOA, GPIO_MODE_OUTPUT, 9},
	{GPIOB, GPIO_MODE_OUTPUT, 7},
	{GPIOC, GPIO_MODE_OUTPUT, 7},
};

void enable_gpio_data(GPIO_DATA gpio_data) {
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	gpio_data.port->MODER &= ~(0b11 << (gpio_data.pin * 2));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	2103      	movs	r1, #3
 80005b6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ba:	43db      	mvns	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	400a      	ands	r2, r1
 80005c2:	601a      	str	r2, [r3, #0]
	gpio_data.port->MODER |= (gpio_data.moder << (gpio_data.pin * 2));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	7a3b      	ldrb	r3, [r7, #8]
 80005ca:	4619      	mov	r1, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	430a      	orrs	r2, r1
 80005da:	601a      	str	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <write_gpio_data>:

void write_gpio_data(GPIO_DATA gpio_data, int value) {
 80005e8:	b490      	push	{r4, r7}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	1d3c      	adds	r4, r7, #4
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005f4:	603b      	str	r3, [r7, #0]
	gpio_data.port->ODR &= ~(0b1 << (gpio_data.pin));
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	400a      	ands	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
	gpio_data.port->ODR |= (value << (gpio_data.pin));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6839      	ldr	r1, [r7, #0]
 8000614:	fa01 f303 	lsl.w	r3, r1, r3
 8000618:	4619      	mov	r1, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bc90      	pop	{r4, r7}
 8000628:	4770      	bx	lr
	...

0800062c <seven_segment_display>:

int read_button(int button) {
    return read_gpio_data(input_pins[button]);
}

void seven_segment_display(int num) {
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b090      	sub	sp, #64	@ 0x40
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

	int patterns[10] = {
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <seven_segment_display+0x90>)
 8000636:	f107 040c 	add.w	r4, r7, #12
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000648:	e884 0003 	stmia.w	r4, {r0, r1}
		0b1111111, // 8
		0b1101111  // 9
	};


	num = num % 10;
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <seven_segment_display+0x94>)
 8000650:	fb83 1302 	smull	r1, r3, r3, r2
 8000654:	1099      	asrs	r1, r3, #2
 8000656:	17d3      	asrs	r3, r2, #31
 8000658:	1ac9      	subs	r1, r1, r3
 800065a:	460b      	mov	r3, r1
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	440b      	add	r3, r1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	607b      	str	r3, [r7, #4]

	int pattern = patterns[num];
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	3340      	adds	r3, #64	@ 0x40
 800066c:	443b      	add	r3, r7
 800066e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (int i = 0; i < 7; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000678:	e017      	b.n	80006aa <seven_segment_display+0x7e>
		int segment_on = (pattern >> i) & 1;
 800067a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800067c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800067e:	fa42 f303 	asr.w	r3, r2, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	637b      	str	r3, [r7, #52]	@ 0x34
		write_gpio_data(seven_segment_pins[i], segment_on ^ 1);
 8000688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800068a:	f083 0101 	eor.w	r1, r3, #1
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <seven_segment_display+0x98>)
 8000690:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	18c2      	adds	r2, r0, r3
 800069c:	460b      	mov	r3, r1
 800069e:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a0:	f7ff ffa2 	bl	80005e8 <write_gpio_data>
	for (int i = 0; i < 7; i++) {
 80006a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006a6:	3301      	adds	r3, #1
 80006a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80006aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	dde4      	ble.n	800067a <seven_segment_display+0x4e>
	}
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3740      	adds	r7, #64	@ 0x40
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	08000f74 	.word	0x08000f74
 80006c0:	66666667 	.word	0x66666667
 80006c4:	20000000 	.word	0x20000000

080006c8 <turn_on_LED_RED>:

void turn_on_LED_RED(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    write_gpio_data(led_pins[0], 1);
 80006cc:	4a09      	ldr	r2, [pc, #36]	@ (80006f4 <turn_on_LED_RED+0x2c>)
 80006ce:	2301      	movs	r3, #1
 80006d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d2:	f7ff ff89 	bl	80005e8 <write_gpio_data>
    write_gpio_data(led_pins[1], 0);
 80006d6:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <turn_on_LED_RED+0x2c>)
 80006d8:	2300      	movs	r3, #0
 80006da:	320c      	adds	r2, #12
 80006dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80006de:	f7ff ff83 	bl	80005e8 <write_gpio_data>
    write_gpio_data(led_pins[2], 0);
 80006e2:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <turn_on_LED_RED+0x2c>)
 80006e4:	2300      	movs	r3, #0
 80006e6:	3218      	adds	r2, #24
 80006e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ea:	f7ff ff7d 	bl	80005e8 <write_gpio_data>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000078 	.word	0x20000078

080006f8 <turn_on_LED_BLUE>:

void turn_on_LED_BLUE(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    write_gpio_data(led_pins[0], 0);
 80006fc:	4a09      	ldr	r2, [pc, #36]	@ (8000724 <turn_on_LED_BLUE+0x2c>)
 80006fe:	2300      	movs	r3, #0
 8000700:	ca07      	ldmia	r2, {r0, r1, r2}
 8000702:	f7ff ff71 	bl	80005e8 <write_gpio_data>
    write_gpio_data(led_pins[1], 1);
 8000706:	4a07      	ldr	r2, [pc, #28]	@ (8000724 <turn_on_LED_BLUE+0x2c>)
 8000708:	2301      	movs	r3, #1
 800070a:	320c      	adds	r2, #12
 800070c:	ca07      	ldmia	r2, {r0, r1, r2}
 800070e:	f7ff ff6b 	bl	80005e8 <write_gpio_data>
    write_gpio_data(led_pins[2], 0);
 8000712:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <turn_on_LED_BLUE+0x2c>)
 8000714:	2300      	movs	r3, #0
 8000716:	3218      	adds	r2, #24
 8000718:	ca07      	ldmia	r2, {r0, r1, r2}
 800071a:	f7ff ff65 	bl	80005e8 <write_gpio_data>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000078 	.word	0x20000078

08000728 <turn_on_LED_GREEN>:

void turn_on_LED_GREEN(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    write_gpio_data(led_pins[0], 0);
 800072c:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <turn_on_LED_GREEN+0x2c>)
 800072e:	2300      	movs	r3, #0
 8000730:	ca07      	ldmia	r2, {r0, r1, r2}
 8000732:	f7ff ff59 	bl	80005e8 <write_gpio_data>
    write_gpio_data(led_pins[1], 0);
 8000736:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <turn_on_LED_GREEN+0x2c>)
 8000738:	2300      	movs	r3, #0
 800073a:	320c      	adds	r2, #12
 800073c:	ca07      	ldmia	r2, {r0, r1, r2}
 800073e:	f7ff ff53 	bl	80005e8 <write_gpio_data>
    write_gpio_data(led_pins[2], 1);
 8000742:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <turn_on_LED_GREEN+0x2c>)
 8000744:	2301      	movs	r3, #1
 8000746:	3218      	adds	r2, #24
 8000748:	ca07      	ldmia	r2, {r0, r1, r2}
 800074a:	f7ff ff4d 	bl	80005e8 <write_gpio_data>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000078 	.word	0x20000078

08000758 <turn_off_LEDs>:

void turn_off_LEDs(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    write_gpio_data(led_pins[0], 0);
 800075c:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <turn_off_LEDs+0x2c>)
 800075e:	2300      	movs	r3, #0
 8000760:	ca07      	ldmia	r2, {r0, r1, r2}
 8000762:	f7ff ff41 	bl	80005e8 <write_gpio_data>
    write_gpio_data(led_pins[1], 0);
 8000766:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <turn_off_LEDs+0x2c>)
 8000768:	2300      	movs	r3, #0
 800076a:	320c      	adds	r2, #12
 800076c:	ca07      	ldmia	r2, {r0, r1, r2}
 800076e:	f7ff ff3b 	bl	80005e8 <write_gpio_data>
    write_gpio_data(led_pins[2], 0);
 8000772:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <turn_off_LEDs+0x2c>)
 8000774:	2300      	movs	r3, #0
 8000776:	3218      	adds	r2, #24
 8000778:	ca07      	ldmia	r2, {r0, r1, r2}
 800077a:	f7ff ff35 	bl	80005e8 <write_gpio_data>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000078 	.word	0x20000078

08000788 <GPIO_initialization>:


void GPIO_initialization(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
    RCC_AHB2ENR|= 0b1111111;
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <GPIO_initialization+0x94>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a22      	ldr	r2, [pc, #136]	@ (800081c <GPIO_initialization+0x94>)
 8000794:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8000798:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < sizeof(seven_segment_pins) / sizeof(GPIO_DATA); i++) {
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e00d      	b.n	80007bc <GPIO_initialization+0x34>
    	enable_gpio_data(seven_segment_pins[i]);
 80007a0:	491f      	ldr	r1, [pc, #124]	@ (8000820 <GPIO_initialization+0x98>)
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	440b      	add	r3, r1
 80007ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007b2:	f7ff fef5 	bl	80005a0 <enable_gpio_data>
    for (int i = 0; i < sizeof(seven_segment_pins) / sizeof(GPIO_DATA); i++) {
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b07      	cmp	r3, #7
 80007c0:	d9ee      	bls.n	80007a0 <GPIO_initialization+0x18>
    }
	for (int i = 0; i < sizeof(input_pins) / sizeof(GPIO_DATA); i++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	e00d      	b.n	80007e4 <GPIO_initialization+0x5c>
		enable_gpio_data(input_pins[i]);
 80007c8:	4916      	ldr	r1, [pc, #88]	@ (8000824 <GPIO_initialization+0x9c>)
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007da:	f7ff fee1 	bl	80005a0 <enable_gpio_data>
	for (int i = 0; i < sizeof(input_pins) / sizeof(GPIO_DATA); i++) {
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d9ee      	bls.n	80007c8 <GPIO_initialization+0x40>
	}
	for (int i = 0; i < sizeof(led_pins) / sizeof(GPIO_DATA); i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e00d      	b.n	800080c <GPIO_initialization+0x84>
		enable_gpio_data(led_pins[i]);
 80007f0:	490d      	ldr	r1, [pc, #52]	@ (8000828 <GPIO_initialization+0xa0>)
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000802:	f7ff fecd 	bl	80005a0 <enable_gpio_data>
	for (int i = 0; i < sizeof(led_pins) / sizeof(GPIO_DATA); i++) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3301      	adds	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d9ee      	bls.n	80007f0 <GPIO_initialization+0x68>
	}
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	4002104c 	.word	0x4002104c
 8000820:	20000000 	.word	0x20000000
 8000824:	20000060 	.word	0x20000060
 8000828:	20000078 	.word	0x20000078

0800082c <setup_IC>:


/*
 * Setup PA6 for IC using TIM16
 */
void setup_IC(){
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
	RCC_AHB2ENR |= (1<<('A'-'A')); // enable Port A clock
 8000832:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <setup_IC+0xc4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a2e      	ldr	r2, [pc, #184]	@ (80008f0 <setup_IC+0xc4>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6013      	str	r3, [r2, #0]

	// set PA6 to alternate mode
	__BFI(GPIOA->MODER, GPIO_MODE_ALTERNATE, 6*2, 2)
 800083e:	2302      	movs	r3, #2
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4a2c      	ldr	r2, [pc, #176]	@ (80008f4 <setup_IC+0xc8>)
 8000844:	6813      	ldr	r3, [r2, #0]
 8000846:	68f9      	ldr	r1, [r7, #12]
 8000848:	f361 330d 	bfi	r3, r1, #12, #2
 800084c:	6013      	str	r3, [r2, #0]

	// set PA6 alternate function to TIM16_CH1
	__BFI(GPIOA->AFRL, 14, 6*4, 4)
 800084e:	230e      	movs	r3, #14
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4a28      	ldr	r2, [pc, #160]	@ (80008f4 <setup_IC+0xc8>)
 8000854:	6a13      	ldr	r3, [r2, #32]
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	f361 631b 	bfi	r3, r1, #24, #4
 800085c:	6213      	str	r3, [r2, #32]

	// connect TIM16 clock
	RCC_APB2ENR  |= 1<<17;
 800085e:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <setup_IC+0xcc>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <setup_IC+0xcc>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000868:	6013      	str	r3, [r2, #0]

	TIM16->PSC = 39999; // 0.1kHz
 800086a:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <setup_IC+0xd0>)
 800086c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000870:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM16->ARR = 49; // increment 0.5 second for faster game play
 8000872:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <setup_IC+0xd0>)
 8000874:	2231      	movs	r2, #49	@ 0x31
 8000876:	62da      	str	r2, [r3, #44]	@ 0x2c


	// Set CH1 to input capture
	__BFI(TIM16->CCMR1, 0b01, 0, 2)
 8000878:	2301      	movs	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <setup_IC+0xd0>)
 800087e:	6993      	ldr	r3, [r2, #24]
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	f361 0301 	bfi	r3, r1, #0, #2
 8000886:	6193      	str	r3, [r2, #24]

	// set filter precsclaer to 4
	TIM16->CCMR1 |= 0xb10 << 2;
 8000888:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <setup_IC+0xd0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a1b      	ldr	r2, [pc, #108]	@ (80008fc <setup_IC+0xd0>)
 800088e:	f443 5331 	orr.w	r3, r3, #11328	@ 0x2c40
 8000892:	6193      	str	r3, [r2, #24]

	// set capture filter to f_DTS/32 with 8 samples
	TIM16->CCMR1 |= 0xF << 4;
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <setup_IC+0xd0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <setup_IC+0xd0>)
 800089a:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800089e:	6193      	str	r3, [r2, #24]

	// enable IC
	TIM16->CCER |=1 ;
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <setup_IC+0xd0>)
 80008a2:	6a1b      	ldr	r3, [r3, #32]
 80008a4:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <setup_IC+0xd0>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6213      	str	r3, [r2, #32]

	// set trigger to both rising and falling edges
	TIM16->CCER |= ( 1<<3 | 1<<1);
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <setup_IC+0xd0>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <setup_IC+0xd0>)
 80008b2:	f043 030a 	orr.w	r3, r3, #10
 80008b6:	6213      	str	r3, [r2, #32]

	// enable IC and UI interrupts
	TIM16->DIER |=0b11;
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <setup_IC+0xd0>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <setup_IC+0xd0>)
 80008be:	f043 0303 	orr.w	r3, r3, #3
 80008c2:	60d3      	str	r3, [r2, #12]

	// clear status register
	TIM16->SR = 0;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <setup_IC+0xd0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]


	TIM16->CR1 |=1; // enable TIM16 clock
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <setup_IC+0xd0>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <setup_IC+0xd0>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6013      	str	r3, [r2, #0]
	ISER2 |= 1 << 6;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <setup_IC+0xd4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <setup_IC+0xd4>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e0:	6013      	str	r3, [r2, #0]
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	4002104c 	.word	0x4002104c
 80008f4:	42020000 	.word	0x42020000
 80008f8:	40021060 	.word	0x40021060
 80008fc:	40014400 	.word	0x40014400
 8000900:	e000e108 	.word	0xe000e108

08000904 <setup_OC>:


/*
 * Setup PA7 for OC using TIM17
 */
void setup_OC(){
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
	RCC_AHB2ENR |= 1; // PORT A clock is enabled
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <setup_OC+0x9c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a24      	ldr	r2, [pc, #144]	@ (80009a0 <setup_OC+0x9c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6013      	str	r3, [r2, #0]


	// set GPIO mode to alternate
	__BFI(GPIOA->MODER, GPIO_MODE_ALTERNATE, 7*2, 2)
 8000916:	2302      	movs	r3, #2
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4a22      	ldr	r2, [pc, #136]	@ (80009a4 <setup_OC+0xa0>)
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	f361 338f 	bfi	r3, r1, #14, #2
 8000924:	6013      	str	r3, [r2, #0]

	// set GPIO alternate function to TIM17_CH1
	__BFI(GPIOA->AFRL, 14, 7*4, 4)
 8000926:	230e      	movs	r3, #14
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4a1e      	ldr	r2, [pc, #120]	@ (80009a4 <setup_OC+0xa0>)
 800092c:	6a13      	ldr	r3, [r2, #32]
 800092e:	68b9      	ldr	r1, [r7, #8]
 8000930:	f361 731f 	bfi	r3, r1, #28, #4
 8000934:	6213      	str	r3, [r2, #32]


	RCC_APB2ENR |= 1 << 18; // TIM17 clock is enabled
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <setup_OC+0xa4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <setup_OC+0xa4>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000940:	6013      	str	r3, [r2, #0]

	TIM17->BDTR |= 1 << 15; //MOE
 8000942:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <setup_OC+0xa8>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a19      	ldr	r2, [pc, #100]	@ (80009ac <setup_OC+0xa8>)
 8000948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44

	// select OC
	__BFI(TIM17->CCMR1, 0b00, 0, 2)
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4a16      	ldr	r2, [pc, #88]	@ (80009ac <setup_OC+0xa8>)
 8000954:	6993      	ldr	r3, [r2, #24]
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f361 0301 	bfi	r3, r1, #0, #2
 800095c:	6193      	str	r3, [r2, #24]


	// set output mode PWM1
	__BFI(TIM17->CCMR1, 0b0110, 4, 4)
 800095e:	2306      	movs	r3, #6
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4a12      	ldr	r2, [pc, #72]	@ (80009ac <setup_OC+0xa8>)
 8000964:	6993      	ldr	r3, [r2, #24]
 8000966:	6839      	ldr	r1, [r7, #0]
 8000968:	f361 1307 	bfi	r3, r1, #4, #4
 800096c:	6193      	str	r3, [r2, #24]

	// default polarity is active high

	// enable the timer
	TIM17->CCER |=1 ;
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <setup_OC+0xa8>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <setup_OC+0xa8>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6213      	str	r3, [r2, #32]

	TIM17->DIER |= 0b10; // enable OC interrupt
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <setup_OC+0xa8>)
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	4a0b      	ldr	r2, [pc, #44]	@ (80009ac <setup_OC+0xa8>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	60d3      	str	r3, [r2, #12]
	ISER2 |= 1 << 7; // unmask TIM17 interrupts
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <setup_OC+0xac>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a09      	ldr	r2, [pc, #36]	@ (80009b0 <setup_OC+0xac>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	6013      	str	r3, [r2, #0]


}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	4002104c 	.word	0x4002104c
 80009a4:	42020000 	.word	0x42020000
 80009a8:	40021060 	.word	0x40021060
 80009ac:	40014800 	.word	0x40014800
 80009b0:	e000e108 	.word	0xe000e108

080009b4 <TIM17_IRQHandler>:
typedef struct {
	int note_duration;
}_TunePlayerContext;

_TunePlayerContext _tune_player_context;
void TIM17_IRQHandler() {
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	if ((TIM17->SR & (1 << 1)) != 0) { // if OC interrupt
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <TIM17_IRQHandler+0x44>)
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d014      	beq.n	80009ee <TIM17_IRQHandler+0x3a>
		TIM17->SR &= ~(1 << 1); // clear the interrupt flag
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <TIM17_IRQHandler+0x44>)
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <TIM17_IRQHandler+0x44>)
 80009ca:	f023 0302 	bic.w	r3, r3, #2
 80009ce:	6113      	str	r3, [r2, #16]
		_tune_player_context.note_duration--; // down counting for tone duration
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <TIM17_IRQHandler+0x48>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	4a09      	ldr	r2, [pc, #36]	@ (80009fc <TIM17_IRQHandler+0x48>)
 80009d8:	6013      	str	r3, [r2, #0]
		if (_tune_player_context.note_duration < 0){ // if target duration is reached
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <TIM17_IRQHandler+0x48>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	da05      	bge.n	80009ee <TIM17_IRQHandler+0x3a>
			TIM17->CR1 &= ~1; // stop the timer clock ( play_tune starts it)
 80009e2:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <TIM17_IRQHandler+0x44>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <TIM17_IRQHandler+0x44>)
 80009e8:	f023 0301 	bic.w	r3, r3, #1
 80009ec:	6013      	str	r3, [r2, #0]
		}
	}
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40014800 	.word	0x40014800
 80009fc:	200001f4 	.word	0x200001f4

08000a00 <play_tune>:


/*
 * Plays a tune for given duration (in ms)
 */
void play_tune(unsigned char note, uint16_t duration_ms){
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	460a      	mov	r2, r1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	80bb      	strh	r3, [r7, #4]

	note %=7;
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <play_tune+0x88>)
 8000a14:	fba3 1302 	umull	r1, r3, r3, r2
 8000a18:	1ad1      	subs	r1, r2, r3
 8000a1a:	0849      	lsrs	r1, r1, #1
 8000a1c:	440b      	add	r3, r1
 8000a1e:	0899      	lsrs	r1, r3, #2
 8000a20:	460b      	mov	r3, r1
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	71fb      	strb	r3, [r7, #7]
	const static int tunes[] = {
			262, 294, 330, 349, 392, 440, 494
		 //  C    D    E    F    G    A    B
	};
	int freq = tunes[note];
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4a17      	ldr	r2, [pc, #92]	@ (8000a8c <play_tune+0x8c>)
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	60fb      	str	r3, [r7, #12]

	int prescaler = 4000000/freq /2; // pre-calculate pre-scaler as integer, for precision
 8000a34:	4a16      	ldr	r2, [pc, #88]	@ (8000a90 <play_tune+0x90>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a3c:	0fda      	lsrs	r2, r3, #31
 8000a3e:	4413      	add	r3, r2
 8000a40:	105b      	asrs	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
	_tune_player_context.note_duration =  (freq*duration_ms)/1000; // set tune duration
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <play_tune+0x94>)
 8000a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a52:	1192      	asrs	r2, r2, #6
 8000a54:	17db      	asrs	r3, r3, #31
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <play_tune+0x98>)
 8000a5a:	6013      	str	r3, [r2, #0]
	TIM17->PSC = prescaler-1; // counter clock freq is set to note frequency
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <play_tune+0x9c>)
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28

	// %50 percent duty cycle
	TIM17->ARR  = 1;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <play_tune+0x9c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM17->CCR1 = 1;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <play_tune+0x9c>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	635a      	str	r2, [r3, #52]	@ 0x34

	// enable TIM17 clock
	TIM17->CR1 |= 1;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <play_tune+0x9c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a09      	ldr	r2, [pc, #36]	@ (8000a9c <play_tune+0x9c>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	24924925 	.word	0x24924925
 8000a8c:	08000f9c 	.word	0x08000f9c
 8000a90:	003d0900 	.word	0x003d0900
 8000a94:	10624dd3 	.word	0x10624dd3
 8000a98:	200001f4 	.word	0x200001f4
 8000a9c:	40014800 	.word	0x40014800

08000aa0 <LPUART1_IRQHandler>:
#include "interrupt.h"

int ic_on_progress = 0;
int button_pressed = -1;

void LPUART1_IRQHandler(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
    if ((LPUART1->ISR & (1 << 5)) != 0) {
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <LPUART1_IRQHandler+0x60>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d023      	beq.n	8000afa <LPUART1_IRQHandler+0x5a>
    	// Read the arrived value.
        MOVE move = read_message();
 8000ab2:	f000 f939 	bl	8000d28 <read_message>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	713a      	strb	r2, [r7, #4]
 8000abc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000ac0:	717a      	strb	r2, [r7, #5]
 8000ac2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000ac6:	71bb      	strb	r3, [r7, #6]

		// Check if the move is valid.
		if (!move.fail && (move.button < 0 || move.button >= 7)) {
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	f083 0301 	eor.w	r3, r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <LPUART1_IRQHandler+0x3a>
 8000ad4:	793b      	ldrb	r3, [r7, #4]
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d80c      	bhi.n	8000af4 <LPUART1_IRQHandler+0x54>
			return;
		}
		if (!move.fail && (move.time < 0 || move.time >= 5)) {
 8000ada:	79bb      	ldrb	r3, [r7, #6]
 8000adc:	f083 0301 	eor.w	r3, r3, #1
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <LPUART1_IRQHandler+0x4c>
 8000ae6:	797b      	ldrb	r3, [r7, #5]
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d805      	bhi.n	8000af8 <LPUART1_IRQHandler+0x58>
			return;
		}

		handle_opponents_turn(move);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fd1d 	bl	800052c <handle_opponents_turn>
 8000af2:	e002      	b.n	8000afa <LPUART1_IRQHandler+0x5a>
			return;
 8000af4:	bf00      	nop
 8000af6:	e000      	b.n	8000afa <LPUART1_IRQHandler+0x5a>
			return;
 8000af8:	bf00      	nop
    }
}
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40008000 	.word	0x40008000

08000b04 <TIM16_IRQHandler>:
	char     increment; // 0 or 1 : used for pulse width measurement
	char     is_rising_edge; // indicates edge direction
};
struct _ICContext ic = {0};

void TIM16_IRQHandler() {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	// init internal context

	if ((TIM16->SR & (1 << 1)) != 0) { // if rising or falling edge
 8000b0a:	4b40      	ldr	r3, [pc, #256]	@ (8000c0c <TIM16_IRQHandler+0x108>)
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d05b      	beq.n	8000bce <TIM16_IRQHandler+0xca>
		TIM16->SR &= ~(1 << 1); // clear the interrupt
 8000b16:	4b3d      	ldr	r3, [pc, #244]	@ (8000c0c <TIM16_IRQHandler+0x108>)
 8000b18:	691b      	ldr	r3, [r3, #16]
 8000b1a:	4a3c      	ldr	r2, [pc, #240]	@ (8000c0c <TIM16_IRQHandler+0x108>)
 8000b1c:	f023 0302 	bic.w	r3, r3, #2
 8000b20:	6113      	str	r3, [r2, #16]
		ic.is_rising_edge^=1; // toggle rising/falling edge flag
 8000b22:	4b3b      	ldr	r3, [pc, #236]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000b24:	795b      	ldrb	r3, [r3, #5]
 8000b26:	f083 0301 	eor.w	r3, r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b38      	ldr	r3, [pc, #224]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000b2e:	715a      	strb	r2, [r3, #5]
		if (ic.is_rising_edge){
 8000b30:	4b37      	ldr	r3, [pc, #220]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000b32:	795b      	ldrb	r3, [r3, #5]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d012      	beq.n	8000b5e <TIM16_IRQHandler+0x5a>
			/*
			 * USE ADC TO DETECT WHICH BUTTON IS PRESSED
			 */
			TIM16->CNT=0; // reset timer counter
 8000b38:	4b34      	ldr	r3, [pc, #208]	@ (8000c0c <TIM16_IRQHandler+0x108>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
			ic.increment=1; // set increment so that the time context variable keeps pulse duration
 8000b3e:	4b34      	ldr	r3, [pc, #208]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	711a      	strb	r2, [r3, #4]
			ic.time=0; // reset time context
 8000b44:	4b32      	ldr	r3, [pc, #200]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
			ADC_1->CR |= (1 << 2); //Start regular conversion of ADC
 8000b4a:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <TIM16_IRQHandler+0x110>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	4a31      	ldr	r2, [pc, #196]	@ (8000c14 <TIM16_IRQHandler+0x110>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6093      	str	r3, [r2, #8]
			ic_on_progress = 1;
 8000b56:	4b30      	ldr	r3, [pc, #192]	@ (8000c18 <TIM16_IRQHandler+0x114>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e037      	b.n	8000bce <TIM16_IRQHandler+0xca>
		}
		else{
			/*
			 * PUBLISH NOTE TIME WITH UART
			 */
			if (current_turn != OPPONENT) {
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <TIM16_IRQHandler+0x118>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d02d      	beq.n	8000bc2 <TIM16_IRQHandler+0xbe>
				if (button_pressed != -1) {
 8000b66:	4b2e      	ldr	r3, [pc, #184]	@ (8000c20 <TIM16_IRQHandler+0x11c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6e:	d016      	beq.n	8000b9e <TIM16_IRQHandler+0x9a>
					handle_player_turn((MOVE){0, ic.time%5, false});
 8000b70:	2300      	movs	r3, #0
 8000b72:	713b      	strb	r3, [r7, #4]
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000b76:	6819      	ldr	r1, [r3, #0]
 8000b78:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <TIM16_IRQHandler+0x120>)
 8000b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b7e:	089a      	lsrs	r2, r3, #2
 8000b80:	4613      	mov	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	1aca      	subs	r2, r1, r3
 8000b88:	b2d3      	uxtb	r3, r2
 8000b8a:	717b      	strb	r3, [r7, #5]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71bb      	strb	r3, [r7, #6]
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fc7f 	bl	8000494 <handle_player_turn>
					button_pressed = -1;
 8000b96:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <TIM16_IRQHandler+0x11c>)
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	601a      	str	r2, [r3, #0]
				}
				play_tune(ic.time%7, 100);
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <TIM16_IRQHandler+0x124>)
 8000ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba8:	1ad1      	subs	r1, r2, r3
 8000baa:	0849      	lsrs	r1, r1, #1
 8000bac:	440b      	add	r3, r1
 8000bae:	0899      	lsrs	r1, r3, #2
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	1a5b      	subs	r3, r3, r1
 8000bb6:	1ad1      	subs	r1, r2, r3
 8000bb8:	b2cb      	uxtb	r3, r1
 8000bba:	2164      	movs	r1, #100	@ 0x64
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff1f 	bl	8000a00 <play_tune>
			}
			ic_on_progress = 0;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <TIM16_IRQHandler+0x114>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
			ic.increment=0;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	711a      	strb	r2, [r3, #4]
		}
	}

	// On timer update event increment context time
	if ((TIM16->SR & 1) != 0){
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <TIM16_IRQHandler+0x108>)
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d013      	beq.n	8000c02 <TIM16_IRQHandler+0xfe>
		ic.time+=ic.increment; // increment time only if measuing the pulse
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000be0:	7912      	ldrb	r2, [r2, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000be6:	6013      	str	r3, [r2, #0]
		if (ic.time > 9) ic.time = 0;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b09      	cmp	r3, #9
 8000bee:	d902      	bls.n	8000bf6 <TIM16_IRQHandler+0xf2>
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <TIM16_IRQHandler+0x10c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
		TIM16->SR &= ~1;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <TIM16_IRQHandler+0x108>)
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	4a04      	ldr	r2, [pc, #16]	@ (8000c0c <TIM16_IRQHandler+0x108>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6113      	str	r3, [r2, #16]
	}

	// display current time
	// write_to_7s(self.time);

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40014400 	.word	0x40014400
 8000c10:	200001fc 	.word	0x200001fc
 8000c14:	42028000 	.word	0x42028000
 8000c18:	200001f8 	.word	0x200001f8
 8000c1c:	200000bc 	.word	0x200000bc
 8000c20:	2000009c 	.word	0x2000009c
 8000c24:	cccccccd 	.word	0xcccccccd
 8000c28:	24924925 	.word	0x24924925

08000c2c <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

	if ((ADC_1->ISR & 1 << 2) != 0) { //Check EOC
 8000c32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <ADC1_2_IRQHandler+0x7c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d02f      	beq.n	8000c9e <ADC1_2_IRQHandler+0x72>

		uint32_t temp = ADC_1->DR;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <ADC1_2_IRQHandler+0x7c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	60fb      	str	r3, [r7, #12]
		uint8_t result = temp * 33 / 4095;
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	4613      	mov	r3, r2
 8000c48:	015b      	lsls	r3, r3, #5
 8000c4a:	441a      	add	r2, r3
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <ADC1_2_IRQHandler+0x80>)
 8000c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c52:	1ad2      	subs	r2, r2, r3
 8000c54:	0852      	lsrs	r2, r2, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	0adb      	lsrs	r3, r3, #11
 8000c5a:	72fb      	strb	r3, [r7, #11]
		uint16_t voltage = result;
 8000c5c:	7afb      	ldrb	r3, [r7, #11]
 8000c5e:	813b      	strh	r3, [r7, #8]
		button_pressed = get_button(voltage);
 8000c60:	893b      	ldrh	r3, [r7, #8]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fb64 	bl	8000330 <get_button>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a11      	ldr	r2, [pc, #68]	@ (8000cb0 <ADC1_2_IRQHandler+0x84>)
 8000c6c:	6013      	str	r3, [r2, #0]

		if (ic_on_progress == 0) {
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <ADC1_2_IRQHandler+0x88>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d113      	bne.n	8000c9e <ADC1_2_IRQHandler+0x72>
			handle_player_turn((MOVE){0, ic.time%5, false});
 8000c76:	2300      	movs	r3, #0
 8000c78:	713b      	strb	r3, [r7, #4]
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <ADC1_2_IRQHandler+0x8c>)
 8000c7c:	6819      	ldr	r1, [r3, #0]
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <ADC1_2_IRQHandler+0x90>)
 8000c80:	fba3 2301 	umull	r2, r3, r3, r1
 8000c84:	089a      	lsrs	r2, r3, #2
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	1aca      	subs	r2, r1, r3
 8000c8e:	b2d3      	uxtb	r3, r2
 8000c90:	717b      	strb	r3, [r7, #5]
 8000c92:	2300      	movs	r3, #0
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fbfc 	bl	8000494 <handle_player_turn>
		}

	}

	return;
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop

}
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	42028000 	.word	0x42028000
 8000cac:	00100101 	.word	0x00100101
 8000cb0:	2000009c 	.word	0x2000009c
 8000cb4:	200001f8 	.word	0x200001f8
 8000cb8:	200001fc 	.word	0x200001fc
 8000cbc:	cccccccd 	.word	0xcccccccd

08000cc0 <setup>:
#include "interrupt.h"
#include "adc.h"



void setup() {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	//__enable_irq();
	GPIO_initialization();
 8000cc4:	f7ff fd60 	bl	8000788 <GPIO_initialization>
	setup_IC();
 8000cc8:	f7ff fdb0 	bl	800082c <setup_IC>
	setup_OC();
 8000ccc:	f7ff fe1a 	bl	8000904 <setup_OC>
	setup_adc();
 8000cd0:	f7ff faae 	bl	8000230 <setup_adc>
	LPUART1_initialization();
 8000cd4:	f000 f86a 	bl	8000dac <LPUART1_initialization>

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <main>:

int main(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

	setup();
 8000ce0:	f7ff ffee 	bl	8000cc0 <setup>

	reset_game();
 8000ce4:	f7ff fb5a 	bl	800039c <reset_game>

	while(1){
		__WFI;
 8000ce8:	bf30      	wfi
 8000cea:	e7fd      	b.n	8000ce8 <main+0xc>

08000cec <send_message>:
#include "uart.h"

void send_message(MOVE move) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    if (move.fail) {
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <send_message+0x16>
        LPUART1->TDR = 'A' - 1;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <send_message+0x38>)
 8000cfc:	2240      	movs	r2, #64	@ 0x40
 8000cfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    else {
        LPUART1->TDR = 'A' + move.button * 5 + move.time;
    }
}
 8000d00:	e009      	b.n	8000d16 <send_message+0x2a>
        LPUART1->TDR = 'A' + move.button * 5 + move.time;
 8000d02:	793b      	ldrb	r3, [r7, #4]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3341      	adds	r3, #65	@ 0x41
 8000d0e:	797a      	ldrb	r2, [r7, #5]
 8000d10:	441a      	add	r2, r3
 8000d12:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <send_message+0x38>)
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40008000 	.word	0x40008000

08000d28 <read_message>:

MOVE read_message() {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
    uint8_t value = LPUART1->RDR;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <read_message+0x7c>)
 8000d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d32:	71fb      	strb	r3, [r7, #7]
    MOVE move;
    if (value == 'A' - 1) {
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b40      	cmp	r3, #64	@ 0x40
 8000d38:	d102      	bne.n	8000d40 <read_message+0x18>
        move.fail = true;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	70bb      	strb	r3, [r7, #2]
 8000d3e:	e018      	b.n	8000d72 <read_message+0x4a>
    }
    else {
        move.button = (value - 'A') / 5;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3b41      	subs	r3, #65	@ 0x41
 8000d44:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <read_message+0x80>)
 8000d46:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4a:	1052      	asrs	r2, r2, #1
 8000d4c:	17db      	asrs	r3, r3, #31
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	703b      	strb	r3, [r7, #0]
        move.time = (value - 'A') % 5;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <read_message+0x80>)
 8000d5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d60:	1059      	asrs	r1, r3, #1
 8000d62:	17d3      	asrs	r3, r2, #31
 8000d64:	1ac9      	subs	r1, r1, r3
 8000d66:	460b      	mov	r3, r1
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	1ad1      	subs	r1, r2, r3
 8000d6e:	b2cb      	uxtb	r3, r1
 8000d70:	707b      	strb	r3, [r7, #1]
    }
    return move;
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	463a      	mov	r2, r7
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	8019      	strh	r1, [r3, #0]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	0c12      	lsrs	r2, r2, #16
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	2300      	movs	r3, #0
 8000d84:	793a      	ldrb	r2, [r7, #4]
 8000d86:	f362 0307 	bfi	r3, r2, #0, #8
 8000d8a:	797a      	ldrb	r2, [r7, #5]
 8000d8c:	f362 230f 	bfi	r3, r2, #8, #8
 8000d90:	79ba      	ldrb	r2, [r7, #6]
 8000d92:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40008000 	.word	0x40008000
 8000da8:	66666667 	.word	0x66666667

08000dac <LPUART1_initialization>:


void LPUART1_initialization(void) {
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
    //Enable Clock for Power Interface.
    RCC_APB1ENR1 |= 1 << 28;
 8000db0:	4b39      	ldr	r3, [pc, #228]	@ (8000e98 <LPUART1_initialization+0xec>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a38      	ldr	r2, [pc, #224]	@ (8000e98 <LPUART1_initialization+0xec>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	6013      	str	r3, [r2, #0]
    // Change the regulator mode to Low-power mode.
    PWR_CR1|= 1<<14;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	@ (8000e9c <LPUART1_initialization+0xf0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a36      	ldr	r2, [pc, #216]	@ (8000e9c <LPUART1_initialization+0xf0>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc6:	6013      	str	r3, [r2, #0]
    // Turn VDDIO2 for PG[15:2] pins.
    PWR_CR2|= 1<<9;
 8000dc8:	4b35      	ldr	r3, [pc, #212]	@ (8000ea0 <LPUART1_initialization+0xf4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a34      	ldr	r2, [pc, #208]	@ (8000ea0 <LPUART1_initialization+0xf4>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
    // Select SYSCLK (=4MHz) for the clock source of Low-power UART.
    RCC_CCIPR1 &= ~(1 << 11); RCC_CCIPR1 |= 1 << 10;
 8000dd4:	4b33      	ldr	r3, [pc, #204]	@ (8000ea4 <LPUART1_initialization+0xf8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a32      	ldr	r2, [pc, #200]	@ (8000ea4 <LPUART1_initialization+0xf8>)
 8000dda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b30      	ldr	r3, [pc, #192]	@ (8000ea4 <LPUART1_initialization+0xf8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea4 <LPUART1_initialization+0xf8>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dea:	6013      	str	r3, [r2, #0]
    // Enable GPIO G port for Tx and Rx pins.
    RCC_AHB2ENR|= 1<<6;
 8000dec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <LPUART1_initialization+0xfc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a2d      	ldr	r2, [pc, #180]	@ (8000ea8 <LPUART1_initialization+0xfc>)
 8000df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df6:	6013      	str	r3, [r2, #0]
    // Set alternate function for PG7 and PG8.
    GPIOG->MODER &=~(0b0101 << (7 * 2));
 8000df8:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <LPUART1_initialization+0x100>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8000eac <LPUART1_initialization+0x100>)
 8000dfe:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8000e02:	6013      	str	r3, [r2, #0]
    GPIOG->MODER |= 0b1010 << (7 * 2);
 8000e04:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a28      	ldr	r2, [pc, #160]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e0a:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 8000e0e:	6013      	str	r3, [r2, #0]
    // Connect PG7 to LPUART Tx.
    GPIOG->AFRL &= ~(0b0111 << (7 * 4));
 8000e10:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	4a25      	ldr	r2, [pc, #148]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e16:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8000e1a:	6213      	str	r3, [r2, #32]
    GPIOG->AFRL |= 0b1000 << (7 * 4);
 8000e1c:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	4a22      	ldr	r2, [pc, #136]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e26:	6213      	str	r3, [r2, #32]
    // Connect PG8 to LPUART Tx.
    GPIOG->AFRH &=~0b0111;
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e2e:	f023 0307 	bic.w	r3, r3, #7
 8000e32:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOG->AFRH |= 0b1000;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e38:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <LPUART1_initialization+0x100>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6253      	str	r3, [r2, #36]	@ 0x24
    // Enable Clock for LPUART.
    RCC_APB1ENR2 |= 1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <LPUART1_initialization+0x104>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb0 <LPUART1_initialization+0x104>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]
    // Set LPUART baud rate (BRR) for 115200 baud rate. 256 * 4000000 / 115200 for 115200 baud rate.
    LPUART1->BRR = 106666;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb8 <LPUART1_initialization+0x10c>)
 8000e50:	60da      	str	r2, [r3, #12]
    // Enable FIFO.
    LPUART1->CR1 |= 1 << 29;
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e5c:	6013      	str	r3, [r2, #0]
    // Enable Transmitter and Receiver.
    LPUART1->CR1 |= 0b11 << 2;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e64:	f043 030c 	orr.w	r3, r3, #12
 8000e68:	6013      	str	r3, [r2, #0]
    // Enable interrupt for FIFO is not empty.
    LPUART1->CR1 |= 1 << 5;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6013      	str	r3, [r2, #0]
    // Enable global signalling from ISER.
    ISER2 |= 1 << 2;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <LPUART1_initialization+0x110>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <LPUART1_initialization+0x110>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6013      	str	r3, [r2, #0]
    // Enable LPUART.
    LPUART1->CR1 |= 1;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <LPUART1_initialization+0x108>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	40021058 	.word	0x40021058
 8000e9c:	40007000 	.word	0x40007000
 8000ea0:	40007004 	.word	0x40007004
 8000ea4:	40021088 	.word	0x40021088
 8000ea8:	4002104c 	.word	0x4002104c
 8000eac:	42021800 	.word	0x42021800
 8000eb0:	4002105c 	.word	0x4002105c
 8000eb4:	40008000 	.word	0x40008000
 8000eb8:	0001a0aa 	.word	0x0001a0aa
 8000ebc:	e000e108 	.word	0xe000e108

08000ec0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec0:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eee:	f000 f811 	bl	8000f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef2:	f7ff fef3 	bl	8000cdc <main>

08000ef6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   r0, =_estack
 8000ef8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000f04:	08000fc0 	.word	0x08000fc0
  ldr r2, =_sbss
 8000f08:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000f0c:	20000204 	.word	0x20000204

08000f10 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <BusFault_Handler>
	...

08000f14 <__libc_init_array>:
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	4d0d      	ldr	r5, [pc, #52]	@ (8000f4c <__libc_init_array+0x38>)
 8000f18:	2600      	movs	r6, #0
 8000f1a:	4c0d      	ldr	r4, [pc, #52]	@ (8000f50 <__libc_init_array+0x3c>)
 8000f1c:	1b64      	subs	r4, r4, r5
 8000f1e:	10a4      	asrs	r4, r4, #2
 8000f20:	42a6      	cmp	r6, r4
 8000f22:	d109      	bne.n	8000f38 <__libc_init_array+0x24>
 8000f24:	4d0b      	ldr	r5, [pc, #44]	@ (8000f54 <__libc_init_array+0x40>)
 8000f26:	2600      	movs	r6, #0
 8000f28:	4c0b      	ldr	r4, [pc, #44]	@ (8000f58 <__libc_init_array+0x44>)
 8000f2a:	f000 f817 	bl	8000f5c <_init>
 8000f2e:	1b64      	subs	r4, r4, r5
 8000f30:	10a4      	asrs	r4, r4, #2
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d105      	bne.n	8000f42 <__libc_init_array+0x2e>
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
 8000f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f3c:	3601      	adds	r6, #1
 8000f3e:	4798      	blx	r3
 8000f40:	e7ee      	b.n	8000f20 <__libc_init_array+0xc>
 8000f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f46:	3601      	adds	r6, #1
 8000f48:	4798      	blx	r3
 8000f4a:	e7f2      	b.n	8000f32 <__libc_init_array+0x1e>
 8000f4c:	08000fb8 	.word	0x08000fb8
 8000f50:	08000fb8 	.word	0x08000fb8
 8000f54:	08000fb8 	.word	0x08000fb8
 8000f58:	08000fbc 	.word	0x08000fbc

08000f5c <_init>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr

08000f68 <_fini>:
 8000f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6a:	bf00      	nop
 8000f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6e:	bc08      	pop	{r3}
 8000f70:	469e      	mov	lr, r3
 8000f72:	4770      	bx	lr
